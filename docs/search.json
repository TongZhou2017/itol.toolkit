[{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement tongzhou2017@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Tong Zhou Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"COLLAPSE","text":"COLLAPSE template used collapse branches. Typically, user merges branches B folding recent common ancestor (MRCA). However, normally hard users declare MRCA node directly. node name usually generated automatically software rather specified user building phylogenetic tree. programs even generate node name. section taken complicated cases account, provide corresponding solution, users can easily prepare input data.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html","id":"range-id","dir":"Articles","previous_headings":"","what":"Range ID","title":"COLLAPSE","text":"basic grammar range id written : branch_A|branch_B. section provides example collapse branches using dataset 1 (refer Dataset detail information) document detailed information). Users can download data locally provided link . files read using relative path document, please adjust path based actual situation. first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_groups. Suppose user wants collapse DATASET_SIMPLEBAR DATASET_MULTIBAR one branch; DATASET_TEXT LABELS another branch;DATASET_ALIGNMENT, DATASET_CONNECTIONS, DATASET_IMAGE POPUP_INFO belong advanced visualization one branch: Collapse branches example 1: Simple text branches collapsed first two sets folded branches relatively simple define branches exist , third set folded branches slightly complex, requiring user select two branches longest spacing among four accurately describe extent folded. Writing code DATASET_ALIGNMENT | POPUP_INFO may result omission DATASET_CONNECTIONS branch, branch belong MCRA DATASET_ALIGNMENT POPUP_INFO. process defining branches cumbersome requires manual judgment, function used frequently 23 templates iTOL v6.","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") range_ids <- c(\"DATASET_SIMPLEBAR|DATASET_MULTIBAR\",                \"DATASET_TEXT|LABELS\",                \"DATASET_CONNECTIONS|POPUP_INFO\") unit_1 <- create_unit(data = range_ids,                        key = \"E001_collapse_1\",                        type = \"COLLAPSE\",                        tree = tree) write_unit(unit_1,            paste0(getwd(),\"/E001_collapse_1.txt\"))"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html","id":"node-id","dir":"Articles","previous_headings":"","what":"Node ID","title":"COLLAPSE","text":"Although used tip label example, using node names directly convenient available. Thus, itol.toolkit also enable define collapsed branch using node name directly . tree provided itol.toolkit dataset 1 including node labels: Therefore, specify group want merge directly. Collapse branches example 2: Node-based branch collapsing questions upload results files iTOL toolkit interactive visualization iTOL, please refer Operation document step--step guidance.","code":"ape::read.tree(tree) # Phylogenetic tree with 23 tips and 22 internal nodes. # # Tip labels: #   SPACING, COLLAPSE, PRUNE, TREE_COLORS, DATASET_STYLE, DATASET_CONNECTIONS, ... # Node labels: #   I1, I2, tree_sturcture, I4, theme_style, I6, ... #  # Rooted; includes branch lengths. group_names <- unique(c(\"tree_sturcture\", \"theme_style\", \"text\", \"basic_plot\")) unit_2 <- create_unit(data = group_names,                        key = \"E002_collapse_2\",                        type = \"COLLAPSE\",                        tree = tree) write_unit(unit_2,            paste0(getwd(),\"/E002_collapse_2.txt\"))"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Color_Palette","text":"itol, templates need users specify color information manually, causing inconvenience preparing large amounts data visualization. Therefore, itol.toolkit optimized address issue allowing users input metadata, program automatically generates corresponding color information built-color palette. best meet needs different users, several palettes itol.toolkit users select, , course, itol.toolkit retaining choice setting colors manually. addition, limited number colors provided existing itol helper packages makes difficult meet user’s usage needs user large amount data. itol.toolkit provides 75 colors, basically meets user’s usage needs. Users can modify color palette “color” parameter create_unit() function. section describes several ways modify color scheme creating unit itol.toolkit. show color scheme visually, use dataset3 DATASET_COLORSTRIP template demonstration. Users can download data locally provided link . files read using relative path document, please adjust path based actual situation. start, please load packages data.","code":"library(itol.toolkit) library(data.table) library(ape) library(dplyr) library(stringr) tree <- read.tree(\"abunt-tree.nwk\") df_data <- fread(\"abunt-metadata.txt\")"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"table2itol","dir":"Articles","previous_headings":"Built-in color palette","what":"table2itol","title":"Color_Palette","text":"“table2itol” default color palette used widely used table2itol.R tool, itol.toolkit inherent. user set color parameter creating unit, program use color palette default. color palette supports 40 different colors, sufficient users annotating taxonomic information. However, may adequate users large trees annotating lower taxonomic ranks (e.g., genus, species).","code":"unit_1 <- create_unit(data = df_data %>% select(ID, Class),                        key = \"color_table2itol_1\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"wesanderson","dir":"Articles","previous_headings":"Built-in color palette","what":"wesanderson","title":"Color_Palette","text":"default color palette insufficient, user can set color parameter “wesanderson” color palette (Refer wesanderson detail information). color palette supports 75 different colors, can meet users’ needs. Note different random number seeds produce different color schemes using wesanderson color palette, recommended set random number seed using set.seed() function using .","code":"unit_2 <- create_unit(data = df_data %>% select(ID, Genus),                        key = \"color_wesanderson_1\",                       type = \"DATASET_COLORSTRIP\",                       color = \"wesanderson\",                       tree = tree) set.seed(123) unit_3 <- create_unit(data = df_data %>% select(ID, Genus),                        key = \"color_wesanderson_2\",                       type = \"DATASET_COLORSTRIP\",                       color = \"wesanderson\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"rcolorbrewer","dir":"Articles","previous_headings":"Built-in color palette","what":"RColorBrewer","title":"Color_Palette","text":"RColorBrewer package provides three categories 44 color palettes (refer ColorBrewer2 detail information), users can view palettes display.brewer.() function. itol.toolkit supports using RColorBrewer color palette. Note creating unit using RColorBrewer color palette, users need set “color” parameter name palette RColorBrewer instead setting directly “RColorBrewer”.","code":"library(RColorBrewer) display.brewer.all() unit_4 <- create_unit(data = df_data %>% select(ID, Phylum),                        key = \"color_RColorBrewer_1\",                       type = \"DATASET_COLORSTRIP\",                       color = \"Set1\",                       tree = tree)  unit_5 <- create_unit(data = df_data %>% select(ID, Phylum),                        key = \"color_RColorBrewer_2\",                       type = \"DATASET_COLORSTRIP\",                       color = \"Set3\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"ggsci","dir":"Articles","previous_headings":"Built-in color palette","what":"ggsci","title":"Color_Palette","text":"ggsci package offers collection high-quality color palettes inspired colors used scientific journals, data visualization libraries, science fiction movies, TV shows (refer ggsci detail information). itol.toolkit built-ggsci color palettes, users can use color palettes setting “color” parameter. Note creating unit using ggsci color palette, users need set “color” parameter name palette ggsci instead setting directly “ggsci”. different types exist color palettes, use underscore _ separate palettes name type.","code":"unit_6 <- create_unit(data = df_data %>% select(ID, Phylum),                        key = \"color_ggsci_1\",                       type = \"DATASET_COLORSTRIP\",                       color = \"npg\",                       tree = tree) unit_7 <- create_unit(data = df_data %>% select(ID, Phylum),                        key = \"color_ggsci_2\",                       type = \"DATASET_COLORSTRIP\",                       color = \"d3_category10\",                       tree = tree) unit_8 <- create_unit(data = df_data %>% select(ID, Phylum),                        key = \"color_ggsci_3\",                       type = \"DATASET_COLORSTRIP\",                       color = \"d3_category8\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"set-colors-manually","dir":"Articles","previous_headings":"","what":"Set colors manually","title":"Color_Palette","text":"Users can set colors manually adding columns containing color information metadata. program supports hexadecimal, RGB, RGBA color formats automatically recognizes strings starting “#” “rgb” color information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"hexadecimal","dir":"Articles","previous_headings":"Set colors manually","what":"Hexadecimal","title":"Color_Palette","text":"","code":"phylum_color <- tribble(   ~Phylum, Phylum_color,   \"Proteobacteria\", \"#5a7860\",   \"Actinobacteria\", \"#92af83\",   \"Firmicutes\",     \"#f1e0a8\",   \"Nitrospirae\",    \"#dd7050\",   \"Bacteroidetes\",  \"#cca663\" ) df_data <- df_data %>%    left_join(phylum_color) unit_9 <- create_unit(data = df_data %>%                          select(ID, Phylum, Phylum_color),                        key = \"color_manual_1\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"rgb","dir":"Articles","previous_headings":"Set colors manually","what":"RGB","title":"Color_Palette","text":"","code":"phylum_color <- tribble(   ~Phylum, Phylum_color,   \"Proteobacteria\", \"rgb(16, 70, 128)\",   \"Actinobacteria\", \"rgb(109, 173, 209)\",   \"Firmicutes\",     \"rgb(233, 241, 244)\",   \"Nitrospirae\",    \"rgb(220, 109, 87)\",   \"Bacteroidetes\",  \"rgb(183, 34, 48)\" ) df_data <- df_data %>%    left_join(phylum_color) unit_10 <- create_unit(data = df_data %>%                          select(ID, Phylum, Phylum_color),                        key = \"color_manual_2\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Color_Palette.html","id":"rgba","dir":"Articles","previous_headings":"Set colors manually","what":"RGBA","title":"Color_Palette","text":"","code":"phylum_color <- tribble(   ~Phylum, Phylum_color,   \"Proteobacteria\", \"rgba(16, 70, 128, 0.8)\",   \"Actinobacteria\", \"rgba(109, 173, 209, 0.8)\",   \"Firmicutes\",     \"rgba(233, 241, 244, 0.8)\",   \"Nitrospirae\",    \"rgba(220, 109, 87, 0.8)\",   \"Bacteroidetes\",  \"rgba(183, 34, 48, 0.8)\" ) df_data <- df_data %>%    left_join(phylum_color) unit_11 <- create_unit(data = df_data %>%                           select(ID, Phylum, Phylum_color),                        key = \"color_manual_3\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Comparison_table2itol.html","id":"table2itol","dir":"Articles","previous_headings":"","what":"table2itol","title":"Comparison_table2itol","text":"table2itol workflow diagram","code":"[TOC] #!/bin/bash ###Zhou xin  ## Beautifying evolutionary tree  ## Scheme 1. Outer ring color, shape classification and abundance scheme # annotation.txt OTU correspond to species annotations and abundance， # -a Cannot find the input column will terminate the run (not executed by default) #-c Converts an integer column to a factor or a number with a decimal point #-t Transforms the ID column when deviating from the hint label #-w Color band, area width, etc #-D Output directory #-i OTU column name #-l OTU display names such as species/genus/family names # cd ${wd}/result/tree Rscript ./table2itol.R -a -c double -D plan1 -i OTUID -l Genus -t %s -w 0.5 annotation.txt # Generate a separate file for each column in the comment file  ## Scheme 2. Generate annotation file of abundance column bar chart Rscript ./table2itol.R -a -d -c none -D plan2 -b Phylum -i OTUID -l Genus -t %s -w 0.5 annotation.txt  ## Scheme 3. Generate annotation file of heat map Rscript ./table2itol.R -c keep -D plan3 -i OTUID -t %s otutab_high.mean  ## Scheme 4. Convert integers into factors to generate comment files Rscript ./table2itol.R -a -c factor -D plan4 -i OTUID -l Genus -t %s -w 0 annotation.txt  # Return to the working directory cd ${wd}"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Comparison_table2itol.html","id":"itol-toolkit","dir":"Articles","previous_headings":"","what":"itol.toolkit","title":"Comparison_table2itol","text":"itol.toolkit workflow diagram Labels example genus names Tree colors phylum Color strip class Multibar chart example Pie chart example","code":"library(itol.toolkit) # main package library(dplyr) # data manipulation library(data.table) # file read library(ape) # tree operation library(stringr) # string operation library(tidyr) # data manipulation tree_1 <- system.file(\"extdata\",\"dataset4/otus.contree\",package = \"itol.toolkit\") hub_1 <- create_hub(tree_1) data_file_1 <- system.file(\"extdata\",\"dataset4/annotation.txt\",package = \"itol.toolkit\") data_file_2 <- system.file(\"extdata\",\"dataset4/otutab_high.mean\",package = \"itol.toolkit\") data_1 <- data.table::fread(data_file_1) data_2 <- data.table::fread(data_file_2) # relabel by genus unit_1 <- create_unit(data = data_1 %>% select(ID, Genus),                       key = \"rep_Zhou_1_labels\",                       type = \"LABELS\",                       tree = tree_1) write_unit(unit_1) # tree_colors range by phylum unit_2 <- create_unit(data = data_1 %>% select(ID, Phylum),                     key = \"rep_Zhou_2_range\",                     type = \"TREE_COLORS\",                     subtype = \"range\",                     tree = tree_1) write_unit(unit_2) # color_strip by class set.seed(123) unit_3 <- create_unit(data = data_1 %>% select(ID, Class),                       key = \"rep_Zhou_3_strip\",                       type = \"DATASET_COLORSTRIP\",                       color = \"wesanderson\",                       tree = tree_1) unit_3@common_themes$basic_theme$margin <- 50 # simple_bar by NS unit_4 <- create_unit(data = data_1 %>% select(ID, South_America, Asia, North_America),                       key = \"rep_Zhou_4_multibar\",                       type = \"DATASET_MULTIBAR\",                       tree = tree_1) unit_4@specific_themes$basic_plot$size_max <- 100 #Adding comment tag unit_5 <- create_unit(data = data_1 %>% select(ID, Class, Family),                       key = \"rep_Zhou_5_binary\",                       type = \"DATASET_DOMAINS\",                       color = \"wesanderson\",                       tree = tree_1)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Comparison_table2itol.html","id":"write-by-hub-level","dir":"Articles","previous_headings":"itol.toolkit","what":"write by hub level","title":"Comparison_table2itol","text":"","code":"#Storing drawing information hub_1 <- hub_1 +   unit_1 +   unit_2 +   unit_3 +   unit_4 +   unit_5  write_hub(hub_1,getwd())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Comparison_table2itol.html","id":"new-in-v1-1-8","dir":"Articles","previous_headings":"","what":"New in v1.1.8","title":"Comparison_table2itol","text":"Pencil Plot Final combined visualization","code":"set.seed(123) unit_6 <- create_unit(data = data_1 %>% select(ID, Class, Family),                       key = \"New_in_v1.1.8\",                       type = \"DATASET_DOMAINS\",                       color = \"wesanderson\",                       shape = \"TL\",                       tree = tree_1) write_unit(unit_6)"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_ALIGNMENT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_ALIGNMENT","text":"function DATASET_ALIGNMENT display multiple sequence alignments (MSA) next leaf node. Consensus sequence (50% conservation) conserved residues calculated automatically. DATASET_ALIGNMENT template belongs “Advanced Graphics” class (refer Class detail information).","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_ALIGNMENT.html","id":"visualize-multiple-sequence-alignments","dir":"Articles","previous_headings":"","what":"visualize multiple sequence alignments","title":"DATASET_ALIGNMENT","text":"section provides example visualize multiple sequence alignments using dataset 1 (refer Dataset detail information) document detailed information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata parameter_groups.txt. parameter_groups.txt file contains type parameter parameters contained template. practice, user needs prepare input file following format: first column tips tree, second column sequence multiple sequence aligning. leaf node name tree_of_itol_templates.tree template names. , generate sequence tip based types corresponding template parameters. sequences used simulate MSA result. processed data stored variable template_start_group, first column template name second column sequence. Dataset alignment visualization example","code":"library(itol.toolkit) library(data.table) library(dplyr) library(tidyr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") parameter_groups <- system.file(\"extdata\",                                 \"parameter_groups.txt\",                                 package = \"itol.toolkit\") tab_tmp <- fread(parameter_groups) tab_id_group <- tab_tmp[, c(1,2)] tab_tmp <- tab_tmp[, -c(1,2)] tab_tmp_01 <- convert_01(object = tab_tmp) tab_tmp_01 <- cbind(tab_id_group, tab_tmp_01) order <- c(\"type\",            \"separator\",            \"profile\",            \"field\",            \"common themes\",            \"specific themes\",            \"data\") tab_tmp_01_long <- tab_tmp_01 %>%                    melt(id.vars=c(\"parameter\",\"group\")) template_start_group <- tab_tmp_01_long %>%                         group_by(group,variable) %>%                         summarise(sublen = sum(value)) %>%                         tidyr::spread(key=variable,value=sublen) template_start_group$group <- factor(template_start_group$group,levels = order) template_start_group <- template_start_group %>%                         arrange(group) start_group <- data.frame(Var1 = template_start_group$group, Freq = apply(template_start_group[,-1], 1, max)) start_group$start <- 0 for (i in 2:nrow(start_group)) {     start_group$start[i] <- sum(start_group$Freq[1:(i-1)]) } # Just simulate MSA as example, not necessary for real run template_start_group <- as.data.frame(t(template_start_group)) colnames(template_start_group) <- template_start_group[1,] template_start_group <- template_start_group[-1,] template_start_group[template_start_group == 0] <- \"--\" template_start_group[template_start_group == \" 0\"] <- \"--\" template_start_group$type[template_start_group$type != \"--\"] <- \"AA\" template_start_group$separator[template_start_group$separator != \"--\"] <- \"TT\" template_start_group$profile[template_start_group$profile != \"--\"] <- \"GG\" template_start_group$field[template_start_group$field != \"--\"] <- \"CC\" template_start_group$`common themes`[template_start_group$`common themes` != \"--\"] <- \"AT\" template_start_group$`specific themes`[template_start_group$`specific themes` != \"--\"] <- \"GC\" template_start_group$data[template_start_group$data != \"--\"] <- \"TG\" template_start_group <- template_start_group %>%                         mutate(id = rownames(template_start_group)) %>%                         tidyr::unite(\"seq\",type:data,remove = T, sep = \"\") %>%                         select(id,seq) unit_42 <- create_unit(data = template_start_group,                        key = \"E042_alignment_1\",                        type = \"DATASET_ALIGNMENT\",                        tree = tree)"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_ALIGNMENT.html","id":"consensus-sequence","dir":"Articles","previous_headings":"Style modification","what":"Consensus sequence","title":"DATASET_ALIGNMENT","text":"threshold consensus calculation can set unit@specific_themes$alignment$consensus$threshold variable (0 ~ 100). ignore gaps alignment calculating consensus, set unit@specific_themes$alignment$gap$ignore 1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_ALIGNMENT.html","id":"residues-and-reference-sequences","dir":"Articles","previous_headings":"Style modification","what":"Residues and reference sequences","title":"DATASET_ALIGNMENT","text":"Residues alignment can highlighted dots setting unit@specific_themes$alignment$highlight$type. set consensus, residue displayed dot match consensus sequence. unit@specific_themes$alignment$highlight$type set reference, residues compared reference sequences defined unit@specific_themes$alignment$reference$ids. unit@specific_themes$alignment$reference$ids defined, reference sequences can marked boxes setting unit@specific_themes$alignment$reference$use 1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_BINARY.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_BINARY","text":"function DATASET_BINARY template visualize binary datasets outlined filled symbols. DATASET_BINARY template belongs “Basic graphics” class (refer Class detail information). Typically, users visualize binary datasets outlined filled symbols entering branch/node names metadata, 1 corresponds filled shape, 0 corresponds outlined shape, - 1 corresponds completely omitted shape. section shows use DATASET_BINARY template visualize binary datasets. Without itol.toolkit, users need manually set subtype parameters enter data. itol.toolkit makes entire workflow coherent, allowing users process data R environment directly output template.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_BINARY.html","id":"draw-symbols","dir":"Articles","previous_headings":"","what":"Draw symbols","title":"DATASET_BINARY","text":"section uses dataset 1 example show visualization binary data different types trees (refer Dataset. first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_frequence. metadata processed convert usage frequency binary data. use 1 indicate template type used article, 0 indicate template type used article. can use DATASET_BINARY template visualize binary dataset outlined filled circles.can adjust size symbols unit@specific_themes$basic_plot$height_factor. Binary dataset visualization example 1 worth noting symbol size displayed differently different tree shapes. Therefore, create symbols suitable rectangular tree adjusting unit@specific_themes$basic_plot$height_factor 0.8. can add labels symbols unit@common_themes$label$display. Binary dataset visualization example 2","code":"library(itol.toolkit) library(data.table) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                     \"templates_frequence.txt\",                     package = \"itol.toolkit\") df_frequence <- fread(df_frequence) # assign 0 to missing values (unused template types) df_frequence[is.na(df_frequence)] <- 0 # save the template type column in a variable to prevent overwriting in subsequent assignments ids <- df_frequence$templates # assign 1 to values > 0 (used template types) df_frequence[df_frequence>0] <- 1 # rewrite the overwritten template type column df_frequence$templates <- ids # replace spaces in column names with \"_\" to prevent errors names(df_frequence) <- stringr::str_replace_all(names(df_frequence),\" \",\"_\") unit_24 <- create_unit(data = df_frequence,                        key = \"E024_binary_1\",                        type = \"DATASET_BINARY\",                        tree = tree) unit_24@specific_themes$basic_plot$height_factor <- 0.4 unit_25 <- create_unit(data = df_frequence,                        key = \"E025_binary_2\",                        type = \"DATASET_BINARY\",                        tree = tree) unit_25@specific_themes$basic_plot$height_factor <- 0.8 unit_25@common_themes$label$display <- 1"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_BINARY.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_BINARY","text":"can adjust symbol size fit tree adjusting unit@specific_themes$basic_plot$height_factor.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_BOXPLOT.html","id":"draw-box-plot","dir":"Articles","previous_headings":"","what":"Draw box plot","title":"DATASET_BOXPLOT","text":"section uses dataset 1 draw box plot (refer Dataset detail information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata templates_frequence. Briefly, templates_frequence contains usage template type 21 published studies. perform simple process input raw data convert wide data long data. first column converted table shows templates used study, second column shows frequency template used article. Next, use input data generate box plot template. Boxplot visualization example 1 can also convert original data, log conversion, use draw box plot. Boxplot visualization example 2","code":"library(itol.toolkit) library(data.table) library(ape) library(dplyr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) df_data <- df_frequence %>%    melt(id.vars=c(\"templates\")) %>%    na.omit() %>%    select(templates,value) unit_38 <- create_unit(data = df_data,                        key = \"E038_boxplot_1\",                        type = \"DATASET_BOXPLOT\",                        tree = tree) df_data$value <- log(df_data$value) unit_39 <- create_unit(data = df_data,                        key = \"E039_boxplot_2\",                        type = \"DATASET_BOXPLOT\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_BOXPLOT.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_BOXPLOT","text":"can adjust height box plot adjusting unit@specific_themes$basic_plot$width.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_COLORSTRIP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_COLORSTRIP","text":"function DATASET_COLORSTRIP template generate corresponding color strips outside tree specified tips. DATASET_COLORSTRIP template belongs “Text” class (refer Class detail information). Typically, users add colored strips entering branch names nodes, colors (RGB, RGBA, hexadecimal format), labels. section shows use itol.toolkit add color strips outside tree. Without itol.toolkit, users need manually input colors one one. process cumbersome many tips. help itol.toolkit, users need import metadata, program automatically generate color information tip, greatly improving efficiency data processing.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_COLORSTRIP.html","id":"general-process","dir":"Articles","previous_headings":"","what":"General process","title":"DATASET_COLORSTRIP","text":"section uses dataset 1 dataset 3 examples show adding color strips trees different sizes (refer Dataset detail information). Users can download data locally provided link . files read using relative path document, please adjust path based actual situation.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_COLORSTRIP.html","id":"dataset-1","dir":"Articles","previous_headings":"General process","what":"Dataset 1","title":"DATASET_COLORSTRIP","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_groups. purpose part add different colored strips different types templates. input data DATASET_COLORSTRIP contains two columns: first column leaf node name second group name.can add color strips tips entering branch name. Color strip visualization example 1 Color strips can also added nodes. Color strip visualization example 2 worth noting adding color strip node, color strip displayed outside tree default, can displayed turning Display internal node values iTOL control panel. time, users can display labels Display strip labels iTOL control panel.","code":"library(itol.toolkit) library(data.table) library(ape) tree_1 <- system.file(\"extdata\",                       \"tree_of_itol_templates.tree\",                        package = \"itol.toolkit\") data(\"template_groups\") unit_21 <- create_unit(data = template_groups,                        key = \"E021_color_strip_1\",                        type = \"DATASET_COLORSTRIP\",                        tree = tree_1) df_data <- data.frame(id = c(\"tree_sturcture\", \"theme_style\", \"text\", \"basic_plot\", \"advanced_plot\"),                       data = c(\"tree_sturcture\", \"theme_style\", \"text\", \"basic_plot\", \"advanced_plot\")) unit_22 <- create_unit(data = df_data,                        key = \"E022_color_strip_2\",                        type = \"DATASET_COLORSTRIP\",                        tree = tree_1)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_COLORSTRIP.html","id":"dataset-3","dir":"Articles","previous_headings":"General process","what":"Dataset 3","title":"DATASET_COLORSTRIP","text":"actual use, may large number groups entered users, may exceed number color plates R packages. itol.toolkit, automatic generation 75 colors supported. Tree file rare-tree.nwk large tree composed rare OTUs. rare-metadata.txt file stores abundance information taxonomy information rare OTUs. purpose part display taxonomy information class level OTUs color strips. Filter taxonomy information class metadata generate color strips based . Color strip visualization example 3 noted tree large many annotation information dimensions, may cause browser crash. choose another browser close browser tab time.","code":"library(itol.toolkit) library(data.table) library(ape) library(dplyr) # Users need to `setwd()` to the directory containing dataset3 tree_2 <- read.tree(\"rare-tree.nwk\") df_metadata <- fread(\"rare-metadata.txt\") unit_23 <- create_unit(data = df_metadata %>%                          select(ID, Class),                        key = \"Zheng2022ep_3al_3_strip\",                       type = \"DATASET_COLORSTRIP\",                       color = \"wesanderson\",                       tree = tree_2)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_CONNECTIONS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_CONNECTIONS","text":"function DATASET_CONNECTION template draw line curve two nodes tree. Users can customize appearance connection setting width, color, style (normal dashed), opacity. Additionally, arrowheads can displayed indicate direction connection lines. DATASET_CONNECTION template belongs “Advanced graphics” class (refer Class detail information). nodes connected user inputting IDs specifying line width, color, style, label. Without itol.toolkit, user set appearance connection separately, resulting difficult data preparation process visualization. itol.toolkit provides consistency workflow, enabling user perform data processing visualization preparation seamlessly.user needs input two nodes connected, line width, label text. program automatically generate color information, thereby increasing efficiency visualization preparation.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_CONNECTIONS.html","id":"connection-visualization","dir":"Articles","previous_headings":"","what":"Connection Visualization","title":"DATASET_CONNECTIONS","text":"section provides example draw connection diagram using dataset 1 (refer Dataset detail information) document detailed information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata parameter_groups.txt, template_groups.txt. parameter_groups.txt file contains set parameter parameters contained template. template_groups.txt file contains class template belongs . table used create connection four columns. first two columns connected points, third column line width, fourth column labels. practice, user needs prepare input data according format. , simulate connection templates parameters contain. template stored variable tab_tmp_connect Dataset connections visualization example","code":"library(itol.toolkit) library(data.table) library(dplyr) library(tidyr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") parameter_groups <- system.file(\"extdata\",                                 \"parameter_groups.txt\",                                 package = \"itol.toolkit\") parameter_groups <- fread(parameter_groups) data(\"template_groups\") tab_tmp_connect <- parameter_groups[-1, -c(1,2)] %>%                     convert_01() %>%                     convert_01_to_connect() tab_tmp_connect$val <- tab_tmp_connect$val -1 tab_tmp_connect <- full_join(tab_tmp_connect,                              template_groups,                              by=c(\"row\" = \"template\")) tab_tmp_connect <- tab_tmp_connect %>%                    filter(val > 9) %>%                    filter(row != col) unit_43 <- create_unit(data = tab_tmp_connect,                        key = \"E043_connection_1\",                        type = \"DATASET_CONNECTION\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_CONNECTIONS.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_CONNECTIONS","text":"maximum line width can set unit@specific_themes$connection$line$width_max variable. Arrows can displayed setting unit@specific_themes$connection$arrow$display variable 1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_DOMAINS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_DOMAINS","text":"DATASET_DOMAIN template used visualize schematic representations proteins, protein backbone various shapes depicting locations individual domains. Even though primary use display protein domain architectures, can used various purposes, offers lot flexibility. DATASET_DOMAIN template belongs “Basic graphics” class (refer Class detail information). add schematic representation protein branch, users must input branch name, protein length, marker shape, start end position, color, label structural domain. section shows use itol.toolkit add schematic representations proteins tree. Without itol.toolkit, users need manually input information color shape protein domains one one. faced large amount data, process time consuming. itol.toolkit simplifies data processing procedure integrates seamlessly visual preparation. use itol.toolkit, users need prepare label, length, start, end position corresponding protein domain tip, program automatically sets shape color.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_DOMAINS.html","id":"draw-schematic-representation-of-protein","dir":"Articles","previous_headings":"","what":"Draw schematic representation of protein","title":"DATASET_DOMAINS","text":"section uses dataset 1 show visualization schematic representations proteins (refer Dataset detail information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata parameter_usage_raw.txt. following example data parameter_usage_raw.txt contains types parameters usage template. purpose data processing section demonstrate use various types parameters various templates using schematic representation protein. represent protein domains using type parameter determine length domain number parameters used template type. final result data processing shown variable template_end_group_long. first column template names (corresponding tips tree), second column length protein domain, three four columns starting ending positions protein domain, fifth column parameter types (.e., domain label). Using prepared data create unit Dataset domains visualization example","code":"library(itol.toolkit) library(data.table) library(dplyr) library(tidyr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") tab_tmp <- system.file(\"extdata\",                        \"parameter_groups.txt\",                        package = \"itol.toolkit\") tab_tmp <- fread(tab_tmp) tab_id_group <- tab_tmp[,c(1,2)] tab_tmp <- tab_tmp[,-c(1,2)] tab_tmp_01 <- convert_01(object = tab_tmp) tab_tmp_01 <- cbind(tab_id_group,tab_tmp_01) para_order <- c(\"type\",                 \"separator\",                 \"profile\",                 \"field\",                 \"common themes\",                 \"specific themes\",                 \"data\") template_with_start <- tab_tmp_01 %>%                    pivot_longer(-c('parameter', 'group'),                                  names_to = 'variable',                                 values_to = 'value') %>%                    group_by(group,variable) %>%                    summarise(sublen = sum(value)) %>%                    spread(key=variable,                           value=sublen) %>%                    mutate(group=factor(group,levels = para_order)) %>%                    arrange(group) group_start <- data.frame(group = template_with_start$group,                            Freq = apply(template_with_start[,-1], 1, max)) %>%                mutate(start=lag(cumsum(Freq))) %>%                mutate(start=replace_na(start, 0)) template_with_start_and_end <- sapply(as.list(template_with_start[,-1]),                                        function(x)x + group_start$start) %>%    as.data.frame() %>%   mutate(group=template_with_start$group) %>%   relocate(group) %>%   pivot_longer(-c(\"group\"),                names_to = 'variable',                values_to = \"end\") %>%   left_join(group_start[c('group','start')]) %>%   mutate(length=sum(group_start$Freq),          group =factor(.$group, levels=para_order)) %>%   relocate(variable, length, start, end, group)  group2shape <- tribble(   ~group,               ~shape,   \"type\",               \"HH\",   \"separator\",          \"HV\",   \"profile\",            \"EL\",   \"field\",              \"DI\",   \"common themes\",      \"TR\",   \"specific themes\",    \"TL\",   \"data\",               \"PL\" ) template_end_group_long <- template_with_start_and_end  %>%    left_join(group2shape) unit_34 <- create_unit(data = template_end_group_long,                        key = \"E034_domains_1\",                        type = \"DATASET_DOMAINS\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_DOMAINS.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_DOMAINS","text":"Users can add column long table used generate templates change shape protein domain. assigning domain label column new column replace label shape, can quickly modify shape. Domain shape codes follows:","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_EXTERNALSHAPE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_EXTERNALSHAPE","text":"function template DATASET_EXTERNALSHAPE add shape plots outside nodes. leaf node multiple items shape plots size item represents associated numeric values. Highest value dataset largest size, others scaled proportionally. DATASET_EXTERNALSHAPE template belongs “Basic graphics” class (refer Class detail information). Typically, users draw shape plot entering node names, either leaf node internal node, corresponding data values. Without itol.toolkit, users prepare data visualize separately. contrast, itol.toolkit provides coherent workflow, allowing users prepare data output template file seamlessly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_EXTERNALSHAPE.html","id":"draw-shape-plot","dir":"Articles","previous_headings":"","what":"Draw shape plot","title":"DATASET_EXTERNALSHAPE","text":"section provides example shape plot multi-column data using dataset 1 (refer Dataset detail information) document detailed information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata templates_frequence.txt. Next, process metadata replacing missing values (representing template used study) 0. processing data, ended data frame first column tip name subsequent columns usage frequency template study. Finally, take obtained data input visualize using DATASET_EXTERNALSHAPE template. External shape visualization example worth noting using DATASET_EXTERNALSHAPE template itol.toolkit < v1.1.1, may encounter problem Error get_color(field_length, set = color) : object ‘field_length’ found, please update itol.toolkit case.","code":"library(itol.toolkit) library(data.table) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) df_frequence[is.na(df_frequence)] <- 0 unit_33 <- create_unit(data = df_frequence,                       key = \"E033_external_shape_1\",                       type = \"DATASET_EXTERNALSHAPE\",                       tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_EXTERNALSHAPE.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_EXTERNALSHAPE","text":"user can adjust shape unit@specific_themes$externalshape$type shape code shown : |id|shape| |—|—| |1|square| |2|circle| |3|star| |4|right triangle| |5|left triangle | example, can adjust shape unit_27 circle :","code":"unit_33@specific_themes$externalshape$type <- 2"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_GRADIENT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_GRADIENT","text":"function DATASET_GRADIENT associate specified tree nodes numeric values, displayed colored rectangle outside tree. DATASET_GRADIENT template belongs “Basic graphics” class (refer Class detail information). Typically, users enter leaf node name corresponding value pairs generate colored rectangle outside corresponding tip node. However, raw data users need process usually multi-column wide data (e.g. data multiple biological replicates), need users calculate statistic (e.g. average value). Thus, data analysis iTOL visualization preparation separated without itol.toolkit. section shows use itol.toolkit add corresponding numerical values tip nodes. Users can directly enter multi-column data itol.toolkit. program automatically calculate statistics input data using batch methods, making workflow data analysis visualization coherent. general, Users can determine data processing methods based needs output templates directly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_GRADIENT.html","id":"visualize-numerical-information","dir":"Articles","previous_headings":"","what":"Visualize numerical information","title":"DATASET_GRADIENT","text":"section uses dataset 1 example show visualization binary data different types trees (refer Dataset. first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_frequence. Briefly, templates_frequence contains usage template type 21 published studies. Suppose users want sum frequency template used 21 articles, visualizing using gradient color, users use following codes. Notably, users enter multiple columns data specify method, itol.toolkit uses sum method process data default. Gradient visualization example 1 can also calculate average usage frequency template published articles specifying method parameter mean, use gradient coloring. Gradient visualization example 2","code":"library(itol.toolkit) library(data.table) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) unit_26 <- create_unit(data = df_frequence,                        key = \"E026_gradient_1\",                        type = \"DATASET_GRADIENT\",                        tree = tree) unit_27 <- create_unit(data = df_frequence,                        key = \"E027_gradient_2\",                        type = \"DATASET_GRADIENT\",                        method = \"mean\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_GRADIENT.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_GRADIENT","text":"adjusting unit@specific_themes$heatmap$color$min, unit@specific_themes$heatmap$color$mid, unit@specific_themes$heatmap$color$max, users can customize color gradient rectangle. , set different colors unit_23 unit_24.","code":"unit_26@specific_themes$heatmap$color$min <- \"#0000ff\" unit_26@specific_themes$heatmap$color$max <- \"#ff0000\"  unit_27@specific_themes$heatmap$color$min <- \"#FFF7ED\" unit_27@specific_themes$heatmap$color$mid <- \"#FC8E58\" unit_27@specific_themes$heatmap$color$max <- \"#800000\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_HEATMAP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_HEATMAP","text":"DATASET_HEATMAP template, tree tip associated multiple numeric values, displayed set colored boxes (heatmap). DATASET_HEATMAP template belongs “Basic plot” class (refer Class detail information). section shows use DATASET_HEATMAP template draw heatmap multi-column wide data. Without itol.toolkit, users perform data analysis visualization preparation different environments. itol.toolkit provides consistency workflow, enabling user perform data processing visualization preparation seamlessly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_HEATMAP.html","id":"drawing-heatmap","dir":"Articles","previous_headings":"","what":"Drawing heatmap","title":"DATASET_HEATMAP","text":"section uses dataset 1 dataset 3 examples show drawing heatmap. (refer Dataset detail information). Users can download data locally provided link . files read using relative path document, please adjust path based actual situation.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_HEATMAP.html","id":"dataset-1","dir":"Articles","previous_headings":"Drawing heatmap","what":"Dataset 1","title":"DATASET_HEATMAP","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata templates_frequence.txt. following example data templates_frequence.txt contains usage template type 21 published studies. setting unit@specific_themes$heatmap$color$max unit@specific_themes$heatmap$color$min, can manually control colors corresponding maximum minimum values. addition, mid value default color setting, can manually cancel setting mid value: unit@specific_themes$heatmap$use_mid <- 0 Heatmap visualization example 1","code":"library(itol.toolkit) library(data.table) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) unit_28 <- create_unit(data = df_frequence,                        key = \"E028_heatmap_1\",                        type = \"DATASET_HEATMAP\",                        tree = tree) unit_28@specific_themes$heatmap$color$min <- \"#ffd966\" unit_28@specific_themes$heatmap$color$max <- \"#cc0000\" unit_28@specific_themes$heatmap$use_mid <- 0 write_unit(unit_28)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_HEATMAP.html","id":"dataset-3","dir":"Articles","previous_headings":"Drawing heatmap","what":"Dataset 3","title":"DATASET_HEATMAP","text":"data dataset3 comes Lei Zheng et al. Comparing oxygen, trate simplifies microbial community assembly improve functions electric acceptor waste water treatment, published 2022 Environmental Pollution. part use heatmap show proportion community assembly process bin. original text, data divided two groups (NS OS). , visualize two groups data respectively. files used read using relative path document, please adjust path based actual situation. First, prepare heatmap drawing template using NS group data. Next, use method visualize OS group data. Heatmap visualization example 2 worth noting column names data used draw heatmap displayed side heatmap. Users try avoid using special symbols column names, otherwise errors may occur applying template iTOL: Failed decode file. Make sure ASCII UTF8 plain text format. Try using dataset templates available iTOL’s help pages.","code":"library(itol.toolkit) library(data.table) library(ape) library(dplyr) tree_2_path <- system.file(\"extdata\",                     \"dataset3/assembly-tree.nwk\",                     package = \"itol.toolkit\") tree_2 <- read.tree(tree_2_path) metadata_path <- system.file(\"extdata\",                     \"dataset3/assembly-metadata.txt\",                     package = \"itol.toolkit\") df_metadata <- data.table::fread(metadata_path) df_cap_NS <- df_metadata %>%   select(ID, starts_with(\"NS\")) %>%    select(-ends_with(\"bar\")) unit_29a <- create_unit(data = df_cap_NS,                         key = \"E029_heatmap_2a\",                        type = \"DATASET_HEATMAP\",                         tree = tree_2) unit_29a@specific_themes$heatmap$color$min <- \"#ffffff\" unit_29a@specific_themes$heatmap$color$max <- \"#8ccdd7\" unit_29a@specific_themes$heatmap$use_mid <- 0 write_unit(unit_29a) df_cap_OS <- df_metadata %>% select(ID, starts_with(\"OS\")) %>% select(-ends_with(\"bar\")) unit_29b <- create_unit(data = df_cap_OS,                         key = \"E029_heatmap_2b\",                        type = \"DATASET_HEATMAP\",                         tree = tree_2) unit_29b@specific_themes$heatmap$color$min <- \"#ffffff\" unit_29b@specific_themes$heatmap$color$max <- \"#f89b9b\" unit_29b@specific_themes$heatmap$use_mid <- 0 write_unit(unit_29b)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_HEATMAP.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_HEATMAP","text":"program generate cluster tree based heatmap data side heat map default. want display cluster tree, can modify unit@specific_themes$heatmap$tree$tree_display <- 0: maximum minimum values heatmap can set unit_26@specific_themes$heatmap$value$max unit_26@specific_themes$heatmap$value$min:","code":"unit_28@specific_themes$heatmap$tree$tree_display <- 0 unit_29a@specific_themes$heatmap$tree$tree_display <- 0 unit_29b@specific_themes$heatmap$tree$tree_display <- 0 unit_28@specific_themes$heatmap$value$max <- 8 unit_28@specific_themes$heatmap$value$min <- 0"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_IMAGE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_IMAGE","text":"function DATASET_IMAGE template add external images onto tree. node tree can associated bitmap (format supported browser) vector image (SVG). DATASET_IMAGE template belongs “Advanced Graphics” class (refer Class detail information). Users typically add image tree entering branch name node, position, size factor, rotation, horizontal shift, vertical shift, URL image. section shows use itol.toolkit generate template files adding images tree.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_IMAGE.html","id":"add-image","dir":"Articles","previous_headings":"","what":"Add Image","title":"DATASET_IMAGE","text":"section provides example add image onto tree using dataset 1 (refer Dataset detail information) document detailed information) logo itol.toolkit. Users can download data locally provided link . files read using relative path document, please adjust path based actual situation. first step load newick format tree file tree_of_itol_templates.tree. Users need manually import branch names nodes corresponding image URLs format data.frame, recommended use fread() function data.table package import . course, can also manually enter branch node name image URL directly R environment via data.frame() function, follows: addition four basic parameters create_unit(.e., data, key, type tree), need set parameters determine position size image. position: defines position image tree: -1 = external label number 0 1 = internal image positioned specified value along node branch (example, position 0 exactly start node branch, position 0.5 middle, position 1 end) size_factor: defines size image rotation: defines rotation angle image (0 ~ 360) Dataset image visualization example","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_data <- data.frame(ids = \"I1\",                       text = \"https://tongzhou2017.github.io/itol.toolkit/reference/figures/itol.toolkit_logo.jpg\") unit_44 <- create_unit(data = df_data,                        key = \"E044_image_1\",                        type = \"DATASET_IMAGE\",                        position = 0,                        size_factor = 0.2,                        rotation=0,                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_IMAGE.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_IMAGE","text":"unit@specific_themes$image$shift_h pixel value; can used shift image position left right. default, image’s top left corner aligned node position.unit@specific_themes$image$shift_v pixel value; can used shift image position node","code":"unit_44@specific_themes$image$shift_v <- -150 unit_44@specific_themes$image$shift_h <- -920"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_LINECHART.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_LINECHART","text":"function DATASET_LINECHART draw line chart store corresponding X-axis coordinates Y-axis coordinates. DATASET_LINECHART template belongs “Basic graphics” class (refer Class detail information). Typically, users save drawing information using iTOL, making difficult reproduce pictures share others. , itol.toolkit provides convenient way store X-axis Y-axis coordinates line charts. section shows use itol.toolkit draw line chart store corresponding information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_LINECHART.html","id":"draw-line-chart","dir":"Articles","previous_headings":"","what":"Draw line chart","title":"DATASET_LINECHART","text":"section uses dataset 1 example show draw line chart. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_LINECHART.html","id":"load-data","dir":"Articles","previous_headings":"Draw line chart","what":"Load data","title":"DATASET_LINECHART","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence.","code":"library(itol.toolkit) library(data.table) library(tidyr) library(dplyr) library(stringr) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) names(df_frequence) <- c(   \"id\",   \"Li,S. et al. (2022) J. Hazard. Mater.\",\"Zheng,L. et al. (2022) Environ. Pollut.\",   \"Welter,D.K. et al. (2021) mSystems\",   \"Zhang,L et al. (2022) Nat. Commun.\",   \"Rubbens,P. et al. (2019) mSystems\",   \"Laidoudi,Y. et al. (2022) Pathogens\",   \"Wang,Y. et al. (2022) Nat. Commun.\",   \"Ceres,K.M. et al. (2022) Microb. Genomics\",   \"Youngblut,N.D. et al. (2019) Nat. Commun.\",   \"Balvín,O. et al. (2018) Sci. Rep.\",   \"Prostak,S.M. et al. (2021) Curr. Biol.\",   \"Dijkhuizen,L.W. et al. (2021) Front. Plant Sci.\",   \"Zhang,X. et al. (2022) Microbiol. Spectr.\",   \"Peris,D. et al. (2022) PLOS Genet.\",   \"Denamur,E. et al. (2022) PLOS Genet.\",   \"Dezordi,F.Z. et al. (2022) bioRxiv\",   \"Lin,Y. et al. (2021) Microbiome\",   \"Wang,Y. et al. (2022) bioRxiv\",   \"Qi,Z. et al. (2022) Food Control\",   \"Zhou,X. et al. (2022) Food Res. Int.\",   \"Zhou,X. et al. (2022) Nat. Commun.\") names(df_frequence) <- stringr::str_remove_all(names(df_frequence),\"[()]\") names(df_frequence) <- stringr::str_replace_all(names(df_frequence),\",\",\"-\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_LINECHART.html","id":"data-processing-and-create-the-unit","dir":"Articles","previous_headings":"","what":"Data processing and create the unit","title":"DATASET_LINECHART","text":"Convert wide data long data. conversion, input data fed DATASET_LINECHART three columns: tree tip id, X-axis coordinates, Y-axis coordinates. Line chart visualization example","code":"df_frequence_years <- df_frequence %>%    pivot_longer(-id) %>%    mutate(years = str_extract(name,\"\\\\d{4}\")) %>%    replace(is.na(.), 0) %>%    group_by(id,years) %>%    summarise(value = sum(value)) %>%    pivot_wider(names_from=years,values_from=value) %>%    replace(is.na(.), 0) %>%    pivot_longer(-id) unit_40 <- create_unit(data = df_frequence_years,                     key = \"E040_linechart_1\",                     type = \"DATASET_LINECHART\",                     tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_MULTIBAR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_MULTIBAR","text":"function DATASET_MULTIBAR prepare templates drawing multi-value bar charts. multibar charts, tip node associated multiple numeric values, displayed stacked aligned bar chart outside tree. DATASET_MULTIBAR template belongs “Basic graphics” class (refer Class detail information). multibar charts, individual fields (values) require corresponding labels colors defined using “FIELD_LABELS” “FIELD_COLOR” lines template. Additionally, values typically statistics derived raw data, average sum. Unfortunately, iTOL support statistical analysis, making necessary users use tools perform analysis. Additionally, raw data excluded iTOL templates, posing difficulties reproducing figures sharing others. , provide convenient way calculate statistics multibar charts store FIELD_LABELS FIELD_COLOR values. section describes use itol.toolkit prepare multi-value bar charts templates.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_MULTIBAR.html","id":"plot-multibar-plot","dir":"Articles","previous_headings":"","what":"Plot multibar plot","title":"DATASET_MULTIBAR","text":"section uses dataset 1 example show draw multibar charts. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_MULTIBAR.html","id":"load-data","dir":"Articles","previous_headings":"Plot multibar plot","what":"Load data","title":"DATASET_MULTIBAR","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence.","code":"library(itol.toolkit) library(data.table) library(tidyr) library(dplyr) library(stringr) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- data.table::fread(df_frequence) names(df_frequence) <- c(   \"id\",   \"Li,S. et al. (2022) J. Hazard. Mater.\",\"Zheng,L. et al. (2022) Environ. Pollut.\",   \"Welter,D.K. et al. (2021) mSystems\",   \"Zhang,L et al. (2022) Nat. Commun.\",   \"Rubbens,P. et al. (2019) mSystems\",   \"Laidoudi,Y. et al. (2022) Pathogens\",   \"Wang,Y. et al. (2022) Nat. Commun.\",   \"Ceres,K.M. et al. (2022) Microb. Genomics\",   \"Youngblut,N.D. et al. (2019) Nat. Commun.\",   \"Balvín,O. et al. (2018) Sci. Rep.\",   \"Prostak,S.M. et al. (2021) Curr. Biol.\",   \"Dijkhuizen,L.W. et al. (2021) Front. Plant Sci.\",   \"Zhang,X. et al. (2022) Microbiol. Spectr.\",   \"Peris,D. et al. (2022) PLOS Genet.\",   \"Denamur,E. et al. (2022) PLOS Genet.\",   \"Dezordi,F.Z. et al. (2022) bioRxiv\",   \"Lin,Y. et al. (2021) Microbiome\",   \"Wang,Y. et al. (2022) bioRxiv\",   \"Qi,Z. et al. (2022) Food Control\",   \"Zhou,X. et al. (2022) Food Res. Int.\",   \"Zhou,X. et al. (2022) Nat. Commun.\") names(df_frequence) <- stringr::str_remove_all(names(df_frequence),\"[()]\") names(df_frequence) <- stringr::str_replace_all(names(df_frequence),\",\",\"-\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_MULTIBAR.html","id":"data-processing-and-create-the-unit","dir":"Articles","previous_headings":"Plot multibar plot","what":"Data processing and create the unit","title":"DATASET_MULTIBAR","text":"Convert wide data long data. conversion, input data fed DATASET_MULTIBAR least two columns: first column tip id contain values plot. itol.toolkit automatically assigned FIELD_LABELSby columns names FIELD_COLORS palette. Multibar chart visualization example","code":"df_frequence_years <- df_frequence %>%    pivot_longer(-id)%>%    na.omit() %>%    mutate(years = str_extract(name,\"\\\\d{4}\")) %>%    group_by(id,years) %>%    summarise(value = sum(value)) %>%    spread(years,value) %>%    replace(is.na(.), 0) unit_37 <- create_unit(data = df_frequence_years,                     key = \"E037_simplebar_2\",                      type = \"DATASET_MULTIBAR\",                      tree = tree) write_unit(unit_37)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_PIECHART.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_PIECHART","text":"function DATASET_PIECHART draw pie chart store drawing information. DATASET_PIECHART template belongs “Basic graphics” class (refer Class detail information). Typically, users save drawing information using iTOL, making reproduce pictures share others difficultly. , provide convenient way store radius proportion different groups pip charts. section describes itol.toolkit draw pie chart store corresponding information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_PIECHART.html","id":"general-process","dir":"Articles","previous_headings":"","what":"General process","title":"DATASET_PIECHART","text":"section uses dataset 1 example show draw line chart. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_PIECHART.html","id":"load-data","dir":"Articles","previous_headings":"General process","what":"Load data","title":"DATASET_PIECHART","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence.","code":"library(itol.toolkit) library(data.table) library(tidyr) library(dplyr) library(stringr) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) names(df_frequence) <- c(   \"id\",   \"Li,S. et al. (2022) J. Hazard. Mater.\",\"Zheng,L. et al. (2022) Environ. Pollut.\",   \"Welter,D.K. et al. (2021) mSystems\",   \"Zhang,L et al. (2022) Nat. Commun.\",   \"Rubbens,P. et al. (2019) mSystems\",   \"Laidoudi,Y. et al. (2022) Pathogens\",   \"Wang,Y. et al. (2022) Nat. Commun.\",   \"Ceres,K.M. et al. (2022) Microb. Genomics\",   \"Youngblut,N.D. et al. (2019) Nat. Commun.\",   \"Balvín,O. et al. (2018) Sci. Rep.\",   \"Prostak,S.M. et al. (2021) Curr. Biol.\",   \"Dijkhuizen,L.W. et al. (2021) Front. Plant Sci.\",   \"Zhang,X. et al. (2022) Microbiol. Spectr.\",   \"Peris,D. et al. (2022) PLOS Genet.\",   \"Denamur,E. et al. (2022) PLOS Genet.\",   \"Dezordi,F.Z. et al. (2022) bioRxiv\",   \"Lin,Y. et al. (2021) Microbiome\",   \"Wang,Y. et al. (2022) bioRxiv\",   \"Qi,Z. et al. (2022) Food Control\",   \"Zhou,X. et al. (2022) Food Res. Int.\",   \"Zhou,X. et al. (2022) Nat. Commun.\") names(df_frequence) <- stringr::str_remove_all(names(df_frequence),\"[()]\") names(df_frequence) <- stringr::str_replace_all(names(df_frequence),\",\",\"-\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_PIECHART.html","id":"data-processing-and-create-the-unit","dir":"Articles","previous_headings":"","what":"Data processing and create the unit","title":"DATASET_PIECHART","text":"Convert wide data long data. conversion, input data fed DATASET_PIECHART least two columns: tree tip id radius. two columns, two columns, proportion different groups starts third column. column name group name. Pie chart visualization example","code":"df_frequence_years <- df_frequence %>%    pivot_longer(-id)%>%    mutate(years = str_extract(name,\"\\\\d{4}\")) %>%    replace(is.na(.), 0) %>%    group_by(id,years) %>%    summarise(value = sum(value)) %>%    spread(years,value) %>%    replace(is.na(.), 0) %>%    mutate(size = log(sum(`2018`,`2019`, `2021`, `2022`)+2)) %>%    relocate(size, .after = id) unit_41 <- create_unit(data = df_frequence_years,                      key = \"E041_piechart_1\",                     type = \"DATASET_PIECHART\",                     position = 0,                     tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SIMPLEBAR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_SIMPLEBAR","text":"DATASET_SIMPLEBAR template draw simple bar charts store corresponding numeric value. DATASET_SIMPLEBAR template belongs “Basic graphics” class (refer Class detail information). simple bar chart, tree node associated single numeric value, displayed bar outside tree. value typically statistics derived raw data, average sum. Unfortunately, iTOL support statistical analysis, making necessary users use tools perform analysis. Additionally, raw data excluded iTOL templates, posing difficulties reproducing pictures sharing others. , itol.toolkit provide convenient way calculate statistics simple bar charts. section describes use itol.toolkit prepare simple bar chart templates. section uses dataset 1 example show draw Simple bar charts. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SIMPLEBAR.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"DATASET_SIMPLEBAR","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence.","code":"library(itol.toolkit) library(data.table) library(tidyr) library(dplyr) library(stringr) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- system.file(\"extdata\",                             \"templates_frequence.txt\",                              package = \"itol.toolkit\") df_frequence <- fread(df_frequence) names(df_frequence) <- c(   \"id\",   \"Li,S. et al. (2022) J. Hazard. Mater.\",\"Zheng,L. et al. (2022) Environ. Pollut.\",   \"Welter,D.K. et al. (2021) mSystems\",   \"Zhang,L et al. (2022) Nat. Commun.\",   \"Rubbens,P. et al. (2019) mSystems\",   \"Laidoudi,Y. et al. (2022) Pathogens\",   \"Wang,Y. et al. (2022) Nat. Commun.\",   \"Ceres,K.M. et al. (2022) Microb. Genomics\",   \"Youngblut,N.D. et al. (2019) Nat. Commun.\",   \"Balvín,O. et al. (2018) Sci. Rep.\",   \"Prostak,S.M. et al. (2021) Curr. Biol.\",   \"Dijkhuizen,L.W. et al. (2021) Front. Plant Sci.\",   \"Zhang,X. et al. (2022) Microbiol. Spectr.\",   \"Peris,D. et al. (2022) PLOS Genet.\",   \"Denamur,E. et al. (2022) PLOS Genet.\",   \"Dezordi,F.Z. et al. (2022) bioRxiv\",   \"Lin,Y. et al. (2021) Microbiome\",   \"Wang,Y. et al. (2022) bioRxiv\",   \"Qi,Z. et al. (2022) Food Control\",   \"Zhou,X. et al. (2022) Food Res. Int.\",   \"Zhou,X. et al. (2022) Nat. Commun.\") names(df_frequence) <- stringr::str_remove_all(names(df_frequence),\"[()]\") names(df_frequence) <- stringr::str_replace_all(names(df_frequence),\",\",\"-\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SIMPLEBAR.html","id":"data-processing-and-create-the-unit","dir":"Articles","previous_headings":"","what":"Data processing and create the unit","title":"DATASET_SIMPLEBAR","text":"Let’s say user intends calculate sum template’s frequency 21 articles basis creating Simple bar charts. event user enters multiple columns data without specifying method, itol.toolkit automatically use sum method process data. Simple bar chart visualization example can also calculate average usage frequency template published articles specifying method parameter mean, use basis drawing Simple bar charts.","code":"unit_35 <- create_unit(data = df_frequence,                        key = \"E035_simplebar_1\",                        type = \"DATASET_SIMPLEBAR\",                        tree = tree) unit_36 <- create_unit(data = df_frequence,                        key = \"E036_simplebar_2\",                        type = \"DATASET_SIMPLEBAR\",                        method = \"mean\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SIMPLEBAR.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_SIMPLEBAR","text":"adjusting unit@specific_themes$basic_plot$size_max, users can customize size plot. , set standard size E035 E036.","code":"unit_35@specific_themes$basic_plot$size_max <- 100 unit_36@specific_themes$basic_plot$size_max <- 100"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_STYLE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_STYLE","text":"function DATASET_STYLE template adjust style branches level. includes two subclasses: branch label. function parameter simple, whereas input data complex. DATASET_STYLE template belongs “Style” class (refer Class detail information). Typically, users define branch node style entering branch node name, subclass function name, action location, color, font line style, size. selected branch displayed new style changes specified sub function. function high level integration, data parameters relatively complex, posing great challenge users.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_STYLE.html","id":"adjust-style","dir":"Articles","previous_headings":"","what":"Adjust style","title":"DATASET_STYLE","text":"section uses dataset 1 example show adjust styles. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_STYLE.html","id":"load-data","dir":"Articles","previous_headings":"Adjust style","what":"Load data","title":"DATASET_STYLE","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence. can use branch subtype function adjust color entire branch area. E012, used two columns information implement function. data, subtype information passed “subtype” parameter, position information passed “position” parameter, line thickness passed “size_factor” parameter. line type explicitly defined, default normal line type. Also, colors generated second column input data explicitly specified. input data contains six columns data, program also automatically determine column subtype, color, . addition, colors can also defined “color” parameter. Therefore, various possible situations, program automated processing methods, reducing threshold users prepare input data. Dataset style visualization example 1 can use “branch” subtype function adjust color node area. E013, used two columns information implement function. location defined , program defaults node location. parameters consistent E012. simplify , line thickness 1, size parameter can also omitted written. Dataset style visualization example 2 can use label subtype function adjust color labels node area belongs. E014, used 2 columns information adjust style labels. Note active location node area, id column label subtype function can use branch ids, limitation imposed iTOL . Dataset style visualization example 3 can use label subtype function adjust color labels branch area belongs. E015, used 2 columns information adjust style labels. functions implemented E014, necessary define position entire branch DATASET_STYLE order use node id control large area labels. Dataset style visualization example 4 can use label subtype function simultaneously adjust color labels backgrounds branch area belongs. E016, used 2 columns information adjust style labels backgrounds. Dataset style visualization example 5 template functions, TREE_COLORS one commonly used functions, strongly recommended users master . Using itol.toolkit allows users easily implement complex functions data preparation.DATASET_STYLE improved version TREE_COLORS, splitting original 5 subtypes positional parameters, significant overlap two functions. Also, DATASET_STYLE drops common function range subtype, limits application scenario. Moreover, DATASET_STYLE templates may overwrite previous settings, TREE_COLORS can achieve overlay effect. addition, input data 6 columns pose challenge users, use template function ideal. recommended users master TREE_COLORS.","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_data <- data.frame(id = unique(template_groups$group),                       data = unique(template_groups$group)) unit_12 <- create_unit(data = df_data,                         key = \"E012_style_1\",                        type = \"DATASET_STYLE\",                         subtype = \"branch\",                        position = \"clade\",                        size_factor = 5,                        tree = tree) write_unit(unit_12) unit_13 <- create_unit(data = df_data,                         key = \"E013_style_2\",                         type = \"DATASET_STYLE\",                         subtype = \"branch\",                        size_factor = 5,                        tree = tree) write_unit(unit_13) unit_14 <- create_unit(data = template_groups[1:10,],                         key = \"E014_style_3\",                        type = \"DATASET_STYLE\",                         subtype = \"label\",                        position = \"node\",                        size_factor = 1.5,                        tree = tree) write_unit(unit_14) unit_15 <- create_unit(data = df_data,                        key = \"E015_style_4\",                        type = \"DATASET_STYLE\",                        subtype = \"label\",                        position = \"clade\",                        size_factor = 1.5,                        tree = tree) write_unit(unit_15) unit_16 <- create_unit(data = df_data,                         key = \"E016_style_5\",                         type = \"DATASET_STYLE\",                         subtype = \"label\",                        position = \"clade\",                        size_factor = 1.5,                        font_type = \"bold-italic\",                        background_color = \"#000000\",                        tree = tree) write_unit(unit_16)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_STYLE.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_STYLE","text":"template type parameters simple contain style parameters legend, can modified unit@common_themes$legend.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SYMBOL.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_SYMBOL","text":"function DATASET_SYMBOL display various symbol shapes directly branches tree. DATASET_GRADIENT template belongs “Basic graphics” class (refer Class detail information). Users typically add symbols branches tree inputting branch names nodes, well specifying symbol’s size, color, fill, position. section describes use itol.toolkit add symbols branches tree. Without itol.toolkit, users set lot information manually, size location symbol. itol.toolkit automatically configures size, shape, color symbols adjust size symbols globally.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SYMBOL.html","id":"draw-symbols","dir":"Articles","previous_headings":"","what":"Draw symbols","title":"DATASET_SYMBOL","text":"section uses dataset 1 example demonstrate adding symbols branches tree based metadata information. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SYMBOL.html","id":"load-data","dir":"Articles","previous_headings":"Draw symbols","what":"Load data","title":"DATASET_SYMBOL","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_parameters_count template_groups. following sample file template_parameters_count contains contains style parameters data parameter information template type, column parameter. value 1 indicates template uses parameter, value 0 indicates used. sample file template_groups.txt category information template, first column template name, second column category information. purpose data processing section display number parameters used template adding symbols branches tree. parameters template uses, larger symbol. can use different symbols different groups. program automatically identify set different colors symbol shapes based group information template_groups. number groups exceeds 6, program use different colors shapes distinguish different groups automatically. Symbol visualization example 1 can use “position” parameter set position symbol appears.Position number 0 1, specifying ratio branch length center symbol positioned. , set position 0.5 place symbol middle branch. Symbol visualization example 2 can determine whether symbol filled changing fill parameter. 0 represents outlined symbol, 1 represents filled symbol. Symbol visualization example 3","code":"library(itol.toolkit) library(data.table) library(ape) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") data(\"template_parameters_count\") tree <- read.tree(tree) template_parameters_count <- data.frame(template_parameters_count) df_data <- cbind(template_groups,as.data.frame(rowSums(template_parameters_count))) unit_30 <- create_unit(data = df_data,                     key = \"E030_symbol_1\",                     type = \"DATASET_SYMBOL\",                     position = 1,                     tree = tree) unit_31 <- create_unit(data = df_data,                     key = \"E031_symbol_2\",                     type = \"DATASET_SYMBOL\",                     position = 0.5,                     tree = tree) unit_32 <- create_unit(data = df_data,                     key = \"E032_symbol_3\",                     type = \"DATASET_SYMBOL\",                     position = 0.5,                     tree = tree,                     fill = 0)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_SYMBOL.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_SYMBOL","text":"modifying unit@specific_themes$basic_plot$size_max, can adjust maximum size symbol.","code":"unit_32@specific_themes$basic_plot$size_max <- 40"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_TEXT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DATASET_TEXT","text":"function DATASET_TEXT template associate tree node single text either displayed branch outside node. label, exact position, color, font style, size factor degree rotation can specified. DATASET_TEXT template belongs “Text” class (refer Class detail information). Typically, users need add text labels specifying label text, position, color, style, size, rotation angle node. Without itol.toolkit, users need input information manually, reducing efficiency data processing visualization preparation. itol.toolkit allows users complete visualization preparation efficiently, especially automatically generating color information based data. Moreover itol.toolkit retains ability set colors manually meet users’ needs.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_TEXT.html","id":"text-label","dir":"Articles","previous_headings":"","what":"Text Label","title":"DATASET_TEXT","text":"section uses dataset 1 demonstrate adding text labels tree (refer Dataset detail information). first step load newick format tree file “tree_of_itol_templates.tree”. purpose data processing section add text labels specific locations tree. . Next need prepare input data storing data frame first column containing node ID, second column containing corresponding text, third column containing group data automatic color configuration. case data without third column, program add colors automatically. Without setting “color” parameter, itol.tookit use default palette (refer Color_Palette detail information). Moreover, several styles text can specified users, described follows: size_factor: size text labels rotation: rotation angle text label position: -1, external label; number 0 1, specifying ratio branch length center label positioned (ie. position 0 exactly start node branch, 0.5 middle, 1 end). font_type: style font, can normal, bold, italic bold-italic Text visualization example 1 Users can input data two columns(.e., node ID text), set color manually “color” parameter. Text visualization example 2 Users can define multi-style text adding different tags text: <n> <\/n> : normal text <b> <\/b> : bold <> <\/> : italic <bi> <\/bi> : bold italic <sub> <\/sub> : subscript <sup> <\/sup> : superscript parts label must enclosed one possible tags, including space characters. tag can expanded additional attributes: color: define specific color part label size: define size factor (e.g. 0.5 make part half size) font: define specific font family part label Multiple styles can used external labels (ie. position set -1), aligned tree. Text visualization example 3","code":"library(itol.toolkit) library(data.table) library(dplyr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_data <- data.frame(id = \"I1\",                       text = \"itol.toolkit\",                       data=\"any\") unit_18 <- create_unit(data = df_data,                        key = \"E018_text_1\",                        type = \"DATASET_TEXT\",                        size_factor = 6,                        rotation = 66,                        tree = tree) write_unit(unit_18) df_data <- data.frame(id = \"I1\", text = \"itol.toolkit\") unit_19 <- create_unit(data = df_data,                        key = \"E019_text_2\",                        type = \"DATASET_TEXT\",                        size_factor = 6,                        rotation=66,                        color = \"#0000FF\",                        tree = tree) write_unit(unit_19) df_data <- data.frame(id = \"DATASET_COLORSTRIP\", text = '<i color=\"#0000FF\">itol.<\/i><b>toolkit<\/b>') unit_20 <- create_unit(data = df_data,                        key = \"E020_text_3\",                        type = \"DATASET_TEXT\",                        size_factor = 1,                        rotation = 0,                        position = -1,                        color = \"#000000\",                        tree = tree) write_unit(unit_20)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/DATASET_TEXT.html","id":"style-modification","dir":"Articles","previous_headings":"","what":"Style modification","title":"DATASET_TEXT","text":"Users can adjust position text label following variables: unit@common_themes$label$vertical: Shift internal labels vertically amount pixels (positive negative) unit@common_themes$label$: default, internal labels placed branches. LABELS_BELOW set 1, labels branches unit_18@common_themes$label$straight: set 1, tree rotation influence individual label rotation","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Data_Reproduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data_Reproduction","text":"Typically, existing iTOL-assisted R packages support data flow metadata template files. However, many cases, users access template files metadata. situation mind, itol.toolkit supports forward data flow, also provides function extract metadata template files. Users can get original input file intermediate files objects workflow, hub, unit, template files. section describes workflow reproducing metadata template files unit objects, hub objects.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Data_Reproduction.html","id":"data-reproduction","dir":"Articles","previous_headings":"","what":"Data Reproduction","title":"Data_Reproduction","text":"performing metadata reproduction, users need prepare tree files template files, set working directories. use Tree Life example template files (example_data.zip, refer Tree annotation detail information) provided iTOL demonstration, users can download relevant files link . files read using relative path document, please adjust path based actual situation. template files, users can import “unit” objects file_to_unit() function. importing template file unit, need store data unit variable bulk export. user imports template files corresponding tree file, data units can added variable bulk export. Next, go ahead import remaining template files store variable. Next, create hub use learn_data_from_unit_list() function import data units hub. point, full metadata stored hub. can find data need hub object, store variable export file. Metadata usually stored four objects hub object: seq, abundance, taxonomy, meta.data, correspond different types metadata. Among , data associated leaf nodes stored tip sub-table, data associated internal nodes stored node sub-table. Users can store metadata separately variables write .txt files using write.table() function. Alternatively, users can select required data R store separate variables subsequent access output file.","code":"library(itol.toolkit) library(dplyr) tree = \"tree_of_life.tree.txt\" file_1 = \"tol_spacing.txt\" unit_1 <- file_to_unit(file = file_1, tree = tree) all_data <- list(spacing = unit_1) file_2 = \"colors_no_range_tol.txt\" unit_2 <- file_to_unit(file = file_2,tree = tree) all_data <- append(all_data, list(tree_color = unit_2)) # TREE_COLOR file_3 = \"colors_tol.txt\" unit_3 <- file_to_unit(file = file_3, tree = tree) all_data <- append(all_data, list(tree_color_2 = unit_3))  file_4 = \"colors_dash.txt\" unit_4 <- file_to_unit(file = file_4, tree = tree) all_data <- append(all_data, list(tree_color_3 = unit_4))  file_5 = \"ranges.txt\" unit_5 <- file_to_unit(file = file_5, tree = tree) all_data <- append(all_data, list(tree_color_4 = unit_5))  file_6 = \"tol_ranges_legacy.txt\" unit_6 <- file_to_unit(file = file_6, tree = tree) all_data <- append(all_data, list(tree_color_5 = unit_6))  # DATASET_STYLE file_7 = \"tol_styles.txt\" unit_7 <- file_to_unit(file = file_7, tree = tree) all_data <- append(all_data, list(dataset_style = unit_7))  # LABELS file_8 = \"labels.txt\" unit_8 <- file_to_unit(file = file_8, tree = tree) all_data <- append(all_data, list(labels = unit_8))  # DATASET_TEXT file_9 = \"tol_text1.txt\" unit_9 <- file_to_unit(file = file_9, tree = tree) all_data <- append(all_data, list(dataset_text = unit_9))  file_10 = \"tol_text2.txt\" unit_10 <- file_to_unit(file = file_10, tree = tree) all_data <- append(all_data, list(dataset_text_2 = unit_10))  file_11 = \"tol_text3.txt\" unit_11 <- file_to_unit(file = file_11, tree = tree) all_data <- append(all_data, list(dataset_text_3 = unit_11))  # DATASET_COLORSTRIP file_12 = \"tol_color_strip.txt\" unit_12 <- file_to_unit(file = file_12, tree = tree) all_data <- append(all_data, list(dataset_colorstrip = unit_12))  file_13 = \"tol_color_strip2.txt\" unit_13 <- file_to_unit(file = file_13, tree = tree) all_data <- append(all_data, list(dataset_colorstrip_2 = unit_13))  # DATASET_BINARY file_14 = \"tol_binary.txt\" unit_14 <- file_to_unit(file = file_14, tree = tree) all_data <- append(all_data, list(dataset_binary = unit_14))  file_15 = \"tol_binary2.txt\" unit_15 <- file_to_unit(file = file_15, tree = tree) all_data <- append(all_data, list(dataset_binary_2 = unit_15))  # DATASET_GRADIENT file_16 = \"tol_gradient.txt\" unit_16 <- file_to_unit(file = file_16, tree = tree) all_data <- append(all_data, list(dataset_gradient = unit_16))  # DATASET_HEATMAP file_17 = \"tol_heatmap1.txt\" unit_17 <- file_to_unit(file = file_17, tree = tree) all_data <- append(all_data, list(dataset_heatmap = unit_17))  file_18 = \"tol_heatmap60.txt\" unit_18 <- file_to_unit(file = file_18, tree = tree) all_data <- append(all_data, list(dataset_heatmap_2 = unit_18))  # DATASET_SYMBOL file_19 = \"tol_symbols.txt\" unit_19 <- file_to_unit(file = file_19, tree = tree) all_data <- append(all_data, list(dataset_symbols = unit_19))  file_20 = \"tol_symbols1.txt\" unit_20 <- file_to_unit(file = file_20, tree = tree) all_data <- append(all_data, list(dataset_symbols_2 = unit_20))  file_21 = \"tol_symbols2.txt\" unit_21 <- file_to_unit(file = file_21, tree = tree) all_data <- append(all_data, list(dataset_symbols_3 = unit_21))  # DATASET_EXTERNALSHAPE file_22 = \"tol_external_shapes.txt\" unit_22 <- file_to_unit(file = file_22, tree = tree) all_data <- append(all_data, list(dataset_external_shapes = unit_22))  # DATASET_DOMAINS file_23 = \"tol_domains.txt\" unit_23 <- file_to_unit(file = file_23, tree = tree) all_data <- append(all_data, list(dataset_domains = unit_23))  # DATASET_SIMPLEBAR file_24 = \"tol_simple_bar.txt\" unit_24 <- file_to_unit(file = file_24, tree = tree) all_data <- append(all_data, list(dataset_simple_bar = unit_24))  file_25 = \"tol_simple_bar2.txt\" unit_25 <- file_to_unit(file = file_25, tree = tree) all_data <- append(all_data, list(dataset_simple_bar_2 = unit_25))  file_26 = \"tol_simple_bar3.txt\" unit_26 <- file_to_unit(file = file_26, tree = tree) all_data <- append(all_data, list(dataset_simple_bar_3 = unit_26))  # DATASET_MULTIBAR file_27 = \"tol_multibar10.txt\" unit_27 <- file_to_unit(file = file_27, tree = tree) all_data <- append(all_data, list(dataset_multibar = unit_27))  file_28 = \"tol_multibar50.txt\" unit_28 <- file_to_unit(file = file_28, tree = tree) all_data <- append(all_data, list(dataset_multibar_2 = unit_28))  # DATASET_BOXPLOT file_29 = \"tol_boxplot.txt\" unit_29 <- file_to_unit(file = file_29, tree = tree) all_data <- append(all_data, list(dataset_boxplot = unit_29))  # DATASET_LINECHART file_30 = \"tol_linechart.txt\" unit_30 <- file_to_unit(file = file_30, tree = tree) all_data <- append(all_data, list(dataset_linechart = unit_30))  file_31 = \"tol_linechart-sine.txt\" unit_31 <- file_to_unit(file = file_31, tree = tree) all_data <- append(all_data, list(dataset_linechart_2 = unit_31))  # DATASET_PIECHART file_32 = \"tol_pies1.txt\" unit_32 <- file_to_unit(file = file_32, tree = tree) all_data <- append(all_data, list(dataset_piechart = unit_32))  file_33 = \"tol_pies2.txt\" unit_33 <- file_to_unit(file = file_33, tree = tree) all_data <- append(all_data, list(dataset_piechart_2 = unit_33))  file_34 = \"tol_pies3.txt\" unit_34 <- file_to_unit(file = file_34, tree = tree) all_data <- append(all_data, list(dataset_piechart_3 = unit_34))  # DATASET_ALIGNMENT file_35 = \"tol_alignment.txt\" unit_35 <- file_to_unit(file = file_35, tree = tree) all_data <- append(all_data, list(dataset_alignment = unit_35))  # DATASET_CONNECTION file_36 = \"tol_connections.txt\" unit_36 <- file_to_unit(file = file_36, tree = tree) all_data <- append(all_data, list(dataset_connection = unit_36))  file_37 = \"tol_connections_leaves.txt\" unit_37 <- file_to_unit(file = file_37, tree = tree) all_data <- append(all_data, list(dataset_connection_2 = unit_37))  # DATASET_IMAGE file_38 = \"tol_images.txt\" unit_38 <- file_to_unit(file = file_38, tree = tree) all_data <- append(all_data, list(dataset_image = unit_38))  # POPUP_INFO file_39 = \"popup_info_template.txt\" unit_39 <- file_to_unit(file = file_39, tree = tree) all_data <- append(all_data, list(popup_info = unit_39)) hub <- create_hub(tree = tree) hub <- learn_data_from_unit_list(hub, all_data) seq <- hub@seq write.table(seq,             file = \"seq.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)  abundance <- hub@abundance write.table(abundance,             file = \"abundance.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)  taxonomy <- hub@taxonomy$tip write.table(taxonomy,             file = \"taxonomy.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)  metadata_tip <- hub@meta.data$tip write.table(metadata_tip,             file = \"metadata_tip.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)  metadata_node <- hub@meta.data$node write.table(metadata_node,             file = \"metadata_node.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE) metadata_tip <- hub@meta.data$tip multibar10 <- metadata_tip %>% select(id, starts_with(\"example_multi_bar_chart$\")) write.table(multibar10,             file = \"multibar10_metadata.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)  binary <- metadata_tip %>% select(id, starts_with(\"binary_data$\")) write.table(binary,             file = \"binary_metadata.txt\",             sep = \"\\t\",             quote = FALSE,             row.names = FALSE)"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Data_Reproduction.html","id":"file-to-hub","dir":"Articles","previous_headings":"Tips","what":"File to Hub","title":"Data_Reproduction","text":"addition described method importing template files unit objects importing hub object, also provide method bulk importing directly template files hub object.","code":"hub_2 <- create_hub(tree = tree) hub <- learn_data_from_files(hub,                              dir = getwd(),                              pattern = \"^[^.]*.txt$\") # add unit into object hub <- learn_data_from_file(hub, file=\"tol_alignment.txt\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Data_Reproduction.html","id":"hub-to-file","dir":"Articles","previous_headings":"Tips","what":"Hub to File","title":"Data_Reproduction","text":"itol.toolkit allows users start forward reverse data flow file object workflow, increasing flexibility data processing process. Users can share data templates sharing hubs. users gets hub object instead template file, can also get metadata backwards hub object using method, get template file write_hub() function.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html","id":"dataset-structure","dir":"Articles","previous_headings":"","what":"Dataset structure","title":"Datasets","text":"complete dataset include least following: Tree file Newick format. Metadata. Metadata files functions comma seperated files table seperated files imported R data.table. function special metadata format (e.g. DATASET_ALIGNMENT)","code":""},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html","id":"input","dir":"Articles","previous_headings":"Data input and output","what":"Input","title":"Datasets","text":"Metadata: recommended use data.table::fread read metadata Tree: recommended use ape::read.tree read tree file. non-phylo object tree calculated R environment, recommended use ape::.phylo convert phylo object.","code":"metadata_path <-system.file(\"extdata\",\"parameter_groups.txt\",package = \"itol.toolkit\") meta_data <- data.table::fread(metadata_path) tree_path <- system.file(\"extdata\",\"tree_of_itol_templates.tree\",package = \"itol.toolkit\") tree <- read.tree(tree_path)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html","id":"output","dir":"Articles","previous_headings":"Data input and output","what":"Output","title":"Datasets","text":"Users get unit hub object itol.toolkit annotation. can use write_unit output single unit object, output content template file corresponding object’s type attribute. Also, can add multiple units hub object, use write_hub output template file bulk.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"Datasets","text":"fully demonstrate itol.toolkit functions, presented five datasets: iTOL parameter structure usage. small dataset, mainly used basic function demonstration. Li_2022_JHazardMater. multi group dataset focuses text display, mainly used displaying TEXT functions palette systems. Zheng_2022_EnvironPollut. includes small phylogenetic tree, large phylogenetic tree, comprehensive dataset multi-dimensional data comparison. mainly used palette display, browser overload testing, demonstrate comprehensive use multiple functions. Zhou_2022_FoodRes. dataset mainly used comparing table2itol. Tree life. official standard dataset iTOL, mainly used demonstrating extract combine metadata existing templates.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html","id":"dataset-5","dir":"Articles","previous_headings":"Dataset","what":"Dataset 5","title":"Datasets","text":"See iTOL offical example data .","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Get_Start.html","id":"data-paraperation","dir":"Articles","previous_headings":"","what":"Data paraperation","title":"Get_Start","text":"tree file built-file package, can located system.file function. Users can find file path upload iTOL main tree. template_groups data contains 23 templates’ name types. cluster template types based parameter similarity function type. template_parammeters_count data contains template usage count public papers. searched data GitHub requests authors. example 9 annotation datasets. Run code block get datasets.","code":"tree <- system.file(\"extdata\",\"tree_of_itol_templates.tree\",package = \"itol.toolkit\") data(\"template_groups\") data(\"template_parameters_count\") hub <- create_hub(tree = tree)  ## 1,7 data df_group <- data.frame(id = unique(template_groups$group),                         data = unique(template_groups$group))  ## 2 data df_count <- cbind(template_groups,as.data.frame(rowSums(template_parameters_count)))  ## 3 data df_rename <- data.frame(id = template_groups$template,                          new_label = str_to_title(str_replace_all(template_groups$template,\"_\",\" \")))  ## 5 data tab_tmp_01 <- as.data.frame(t(template_parameters_count)) tab_tmp_connect <- convert_01_to_connect(tab_tmp_01) tab_tmp_connect <- full_join(tab_tmp_connect, template_groups, by=c(\"row\" = \"template\")) tab_tmp_connect <- tab_tmp_connect %>% filter(val > 10) %>% filter(row != col)  ## 6 data tab_tmp <- fread(system.file(\"extdata\",\"parameter_groups.txt\",package = \"itol.toolkit\")) tab_id_group <- tab_tmp[,c(1,2)] tab_tmp <- tab_tmp[,-c(1,2)] tab_tmp_01 <- convert_01(object = tab_tmp) tab_tmp_01 <- cbind(tab_id_group,tab_tmp_01)  order <- c(\"type\",\"separator\",\"profile\",\"field\",\"common themes\",\"specific themes\",\"data\")  tab_tmp_01_long <- tab_tmp_01 %>% tidyr::gather(key = \"variable\",value = \"value\",c(-parameter,-group))  template_start_group <- tab_tmp_01_long %>% group_by(group,variable) %>% summarise(sublen = sum(value)) %>% tidyr::spread(key=variable,value=sublen) template_start_group$group <- factor(template_start_group$group,levels = order) template_start_group <- template_start_group %>% arrange(group) start_group <- data.frame(Var1 = template_start_group$group, Freq = apply(template_start_group[,-1], 1, max)) start_group$start <- 0 for (i in 2:nrow(start_group)) {   start_group$start[i] <- sum(start_group$Freq[1:(i-1)]) } template_start_group[template_start_group == 0] <- NA template_end_group <- template_start_group[,2:(ncol(template_start_group)-1)] + start_group$start template_end_group <- data.frame(group = order,template_end_group) template_end_group_long <- template_end_group %>% tidyr::gather(key = \"variable\",value = \"value\",-group) names(template_end_group_long)[3] <- \"end\" template_end_group_long$start <- rep(start_group$start,length(unique(template_end_group_long$variable))) template_end_group_long <- template_end_group_long %>% na.omit() template_end_group_long$length <- sum(start_group$Freq) template_end_group_long <- template_end_group_long[,c(2,5,4,3,1)] template_end_group_long$group <- factor(template_end_group_long$group,levels = order)  ## 8 data df_values <- fread(system.file(\"extdata\",\"templates_frequence.txt\",package = \"itol.toolkit\")) names(df_values) <- c(\"id\",\"Li,S. et al. (2022) J. Hazard. Mater.\",\"Zheng,L. et al. (2022) Environ. Pollut.\",\"Welter,D.K. et al. (2021) mSystems\",\"Zhang,L et al. (2022) Nat. Commun.\",\"Rubbens,P. et al. (2019) mSystems\",\"Laidoudi,Y. et al. (2022) Pathogens\",\"Wang,Y. et al. (2022) Nat. Commun.\",\"Ceres,K.M. et al. (2022) Microb. Genomics\",\"Youngblut,N.D. et al. (2019) Nat. Commun.\",\"Balvín,O. et al. (2018) Sci. Rep.\",\"Prostak,S.M. et al. (2021) Curr. Biol.\",\"Dijkhuizen,L.W. et al. (2021) Front. Plant Sci.\",\"Zhang,X. et al. (2022) Microbiol. Spectr.\",\"Peris,D. et al. (2022) PLOS Genet.\",\"Denamur,E. et al. (2022) PLOS Genet.\",\"Dezordi,F.Z. et al. (2022) bioRxiv\",\"Lin,Y. et al. (2021) Microbiome\",\"Wang,Y. et al. (2022) bioRxiv\",\"Qi,Z. et al. (2022) Food Control\",\"Zhou,X. et al. (2022) Food Res. Int.\",\"Zhou,X. et al. (2022) Nat. Commun.\") names(df_values) <- str_remove_all(names(df_values),\"[()]\") names(df_values) <- str_replace_all(names(df_values),\",\",\"-\")  ## 9 data df_value <- fread(system.file(\"extdata\",\"templates_frequence.txt\",package = \"itol.toolkit\")) df_value <- df_value %>% tidyr::pivot_longer(-templates) %>% na.omit() %>% select(templates,value) %>% as.data.frame() df_value$value <- log(df_value$value)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Get_Start.html","id":"create-unit","dir":"Articles","previous_headings":"","what":"Create unit","title":"Get_Start","text":"Using default themes create unit object create_unit function. template types need two columns data. data can defined parameter auto-identified programming. data annotation datasets data frame format. key output file name units merged hub written hub object. type template name. tree main tree path phylo object. parameters used relating different template types.","code":"unit_1 <- create_unit(data = df_group,                        key = \"E1_template_types\",                        type = \"TREE_COLORS\",                        subtype = \"clade\",                        line_type = c(rep(\"normal\",4),\"dashed\"),                       size_factor = 5,                        tree = tree)  unit_2 <- create_unit(data = df_count,                        key = \"E2_parameter_number\",                        type = \"DATASET_SYMBOL\",                       position = 1,                        tree = tree)  unit_3 <- create_unit(data = df_rename,                        key = \"E3_template_rename\",                        type = \"LABELS\",                       tree = tree)  unit_4 <- create_unit(data = template_groups,                        key = \"E4_template_name_color\",                        type = \"DATASET_STYLE\",                        subtype = \"label\",                       position = \"node\",                       size_factor = 1.5,                       tree = tree)  unit_5 <- create_unit(data = tab_tmp_connect[,1:4],                        key = \"E5_template_similarity\",                        type = \"DATASET_CONNECTION\",                        tree = tree)  unit_6 <- create_unit(data = template_end_group_long,                        key = \"E6_template_parameters_structure\",                        type = \"DATASET_DOMAINS\",                        tree = tree)  unit_7 <- create_unit(data = df_group,                        key = \"E7_template_types\",                        type = \"DATASET_COLORSTRIP\",                        tree = tree)  unit_8 <- create_unit(data = df_values,                        key = \"E8_usage_count_among_publications\",                        type = \"DATASET_HEATMAP\",                        tree = tree)  unit_9 <- create_unit(data = df_value,                        key = \"E9_log_transformed_usage_count\",                        type = \"DATASET_BOXPLOT\",                        tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Get_Start.html","id":"theme-setup","dir":"Articles","previous_headings":"","what":"Theme setup","title":"Get_Start","text":"unit hub object, can change theme setup. theme parameters 23 templates 114 kinds. cluster parameters based function specification.","code":"unit_2@specific_themes$basic_plot$size_max <- 40  unit_5@specific_themes$basic_plot$size_max <- 100  unit_8@specific_themes$heatmap$color$min <- \"#ffd966\" unit_8@specific_themes$heatmap$color$max <- \"#cc0000\" unit_8@specific_themes$heatmap$use_mid <- 0  unit_9@specific_themes$basic_plot$size_max <- 100"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Get_Start.html","id":"merge","dir":"Articles","previous_headings":"","what":"Merge","title":"Get_Start","text":"multi levels annotation, can merge units one hub. hub object can saved locally output template files write_hub function.","code":"hub <- hub +    unit_1 +    unit_2 +    unit_3 +    unit_4 +    unit_5 +    unit_6 +    unit_7 +    unit_8 +    unit_9  write_hub(hub,getwd())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Image_Gallery.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Image_Gallery","text":"order demonstrate use multiple functions itol.toolkit comprehensively, selected published diagrams created iTOL reproduce. data necessary reproduction includes tree files newick format metadata annotation. metadata available, metadata can generated template files shared authors. section lists images reproduced, users can view corresponding detailed reproduction steps links images.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Image_Gallery.html","id":"li-et-al--2022-jhazardmater","dir":"Articles","previous_headings":"","what":"Li et al. 2022 JHazardMater","title":"Image_Gallery","text":"Reproduce_Li_2022_JHazardMater Fig.2 Li et al. 2022","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Image_Gallery.html","id":"zheng-et-al--2022-environpollut","dir":"Articles","previous_headings":"","what":"Zheng et al. 2022 EnvironPollut","title":"Image_Gallery","text":"Reproduce_Zheng_2022_EnvironPollut Fig.3 Zheng et al. 2022 Fig.4 Zheng et al. 2022","code":""},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"ubuntu","dir":"Articles","previous_headings":"Problems caused by the system","what":"Ubuntu","title":"Installation","text":"Ubuntu system, installing ape dependency package, may following problems: due lack basic tools system. Install tools using shell commands:","code":"#  error \"/usr/bin/ld: cannot find -llapack\" #  error \"/usr/bin/ld: cannot find -lgfortran\" sudo apt install liblapack-dev libopenblas-dev gfortran"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"problems-caused-by-r-version","dir":"Articles","previous_headings":"","what":"Problems caused by R version","title":"Installation","text":"development environment itol.toolkit package R4.2.0. Since R version 4.0.0, important language habit updates released, among updates Rcpp, rlang underlying packages great impact users R version 4.0.0. itol.toolkit running versions earlier R4.0.0 may cause errors caused underlying dependency packages. Run itol.toolkit R 4.0.0 later possibly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"nchar-error-in-quickstart","dir":"Articles","previous_headings":"Problems caused by R version","what":"nchar error in quickstart","title":"Installation","text":"following error occurs running quickstart tutorial: best way install itol.toolkit v1.1.2 later, removed nchar dependency favor stringr::str_length, stable across R versions. temporary solution explicitly define color parameter create_unit function.","code":"unit <- create_unit(data = df_group,                       key = \"Quickstart\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree)  #  Error in char (data[[potential_color]]) : #  'nchar()' requires a character vector unit <- create_unit(data = df_group,                       key = \"Quickstart\",                       type = \"DATASET_COLORSTRIP\",                       color = \"Set1\",                     tree = tree)"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"biostrings","dir":"Articles","previous_headings":"Problems caused by dependency packages","what":"Biostrings","title":"Installation","text":"R packages Bioconductor platform automatically installed install.packages devtools::install_github. result error similar following: best way use pak package install itol.toolkit package. See main document method. Another way install dependency packages using BiocManager:","code":"#  error \"package ‘Biostrings’ is not available (for R version 3.6.3)\" # install.packages(\"BiocManager\") BiocManager::install(\"Biostrings\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"fansi","dir":"Articles","previous_headings":"Problems caused by dependency packages","what":"fansi","title":"Installation","text":"typical indirectly dependcy package. best solution using pak install:","code":"#  Error: package or namespace load failed for 'itol.toolkit' in library.dynam(lib, package, package.lib): #  DLL ‘fansi’ not found: maybe not installed for this architecture? #  Error: loading failed #  Stop #  *** arch - x64 #  ERROR: loading failed for 'i386' #  * removing 'C:/Users/86139/Documents/R/win-library/4.1/itol.toolkit' #  Warning message: #  In i.p(...) : #    installation of package ‘C:/Users/86139/AppData/Local/Temp/Rtmpycftoi/file45b02cc43b42/itol.toolkit_1.1.2.tar.gz’ had non-zero exit status install.packages(\"pak\")  # from CRAN pak::pak('itol.toolkit')  # from GitHub # not work for this status https://github.com/r-lib/pak/issues/473 pak::pak('TongZhou2017/itol.toolkit')"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"others","dir":"Articles","previous_headings":"Problems caused by dependency packages","what":"Others","title":"Installation","text":"complete dependency package information follows. network problems, download dependency package manually install locally. See next section details.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/Installation.html","id":"problems-caused-by-the-network","dir":"Articles","previous_headings":"","what":"Problems caused by the network","title":"Installation","text":"encounter similar errors caused network problems: Please download R packages manually package homepages previous section, install locally using following command:","code":"#  Warning in install.packages : #  unable to access index for repository https://cran.rstudio.com/src/contrib:   #  cannot open URL 'https://cran.rstudio.com/src/contrib/PACKAGES'   #  Installing package into ‘C:/Users/25757/Documents/R/win-library/4.0’ #  (as ‘lib’ is unspecified) # #  Warning in install.packages : #  unable to access index for repository https://cran.rstudio.com/src/contrib:   #  cannot open URL 'https://cran.rstudio.com/src/contrib/PACKAGES'   # #  Warning in install.packages : #  package ‘ape’ is not available (for R version 4.0.0)   # #  Warning in install.packages : #  unable to access index for repository https://cran.rstudio.com/bin/windows/contrib/4.0:   #  cannot open URL 'https://cran.rstudio.com/bin/windows/contrib/4.0/PACKAGES' install.packages(PathToPkgFile,repos=NULL,type=\"source\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/LABELS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"LABELS","text":"function LABELS template quickly change text assigned leaf nodes, assign/change names internal nodes. Note function changes displayed text labels, still need use original tree node IDs annotation files. LABELS template belongs “Text” class (refer Class detail information). Typically, user modifies label text entering branch/node name new label. section shows use itol.toolkit modify label text. itol.toolkit makes workflow coherent, allowing user process label text R environment generate template files bulk.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/LABELS.html","id":"change-the-label-text","dir":"Articles","previous_headings":"","what":"Change the label text","title":"LABELS","text":"section provides example change label text using dataset 1 (refer Dataset detail information) document detailed information). first step load newick format tree file tree_of_itol_templates.tree corresponding metadata template_groups. template_groups file contains class template belongs . Next, process data generate new labels. new label processing stored variable df_data, first column branch name, second column label text. practice, users need process import label text data format. Labels visualization example","code":"library(itol.toolkit) library(stringr) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\")  data(\"template_groups\") df_data <- data.frame(id = template_groups$template,                       new_label = str_to_title(str_replace_all(template_groups$template,\"_\",\" \"))) unit_17 <- create_unit(data = df_data,                        key = \"E017_label_1\",                        type = \"LABELS\",                        tree = tree) write_unit(unit_17)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_STYLE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"OVERVIEW_STYLE","text":"According parameter usage similarity functional similarity templates, 23 functional types iTOL v6 templates clustered, can divided five parts: Tree structure：COLLAPSE、PRUNE、SPACING Style：TREE_COLORS、DATASET_STYLE Text：LABELS、DATASET_TEXT、DATASET_COLORSTRIP Basic graphics：DATASET_BINARY、DATASET_GRADIENT、DATASET_HEATMAP、DATASET_SYMBOL、DATASET_EXTERNALSHAPE、DATASET_DOMAINS、DATASET_SIMPLEBAR、DATASET_MULTIBAR、DATASET_BOXPLOT、DATASET_LINECHART、DATASET_PIECHART Advanced graphics：DATASET_ALIGNMENT、DATASET_CONNECTION、DATASET_IMAGE、POPUP_INFO section outlines templates belong “style class”. Five indicators used evaluate template function different dimensions. five indicators : Usage frequency: average number times template type used published papers calculated logarithmic converted. Style complexity: number style class parameters converted square root conversion. -Input threshold: number data class parameters + number terms multiple choice parameters + number sub-parameters aggregation parameters + number indirect data parameters. infinite items, single item value denoted 5 capping. -Core score: According non-replaceability, degree overlap functions, application potential(used weight), core score given. lowest score 0 points highest score 5 points. -Diversity score: According frequency collaboration templates, scalability functions, diversity functional application scenarios, diversity score given. lowest score item 0 points highest score 5 points. 0 points indicate function monotonous, 5 points indicate function diverse （我直接把OVERVIWE_TREE_STRUCTURE的复制过来了，后续看看再改改）","code":"library(itol.toolkit) df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) df_frequence <- data.frame(template = df_frequence$templates,                             value = rowSums(df_frequence[,-1],na.rm = T)) df_frequence$value <- round(log(df_frequence$value+1),2) data(\"template_parameters_count\") round(sqrt(rowSums(template_parameters_count[,1:113])+1),2) data(\"template_parameters_count\") rowSums(template_parameters_count[,114:148])"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_STYLE.html","id":"tree_colors-beautify-style","dir":"Articles","previous_headings":"","what":"TREE_COLORS Beautify style","title":"OVERVIEW_STYLE","text":"Degree usability：2.89 Style complexity：1.41 Threshold entry：9 Core index：(5+3)*(2.89/2)=11.56 Diversity index：(5+0+2)/3 = 2.33 using TREE_COLORS annotation file, can define colors, styles widths/sizes individual node tip tree. iTOL template, required input data 4-5 columns strict order: branch name node（没懂这个or node是什么意思）, subclass function name, color, label style, size. five subclasses: range, clade, branch, label, label_background. input data requirements, difficult users straighten complex data input requirements. itol.toolkit greatly simplifies threshold data preparation automating identification data program. needs least 2 columns input data. template functions, TREE_ COLORS one commonly used functions. rich style control functions often used combination functions achieve unification overall visual style. core function iTOL various functions, strongly recommended users master. itol.toolkit implements complete set automated processing parameters function, including extracing data, output, editing, saving.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_STYLE.html","id":"dataset_style-beautify-branches","dir":"Articles","previous_headings":"","what":"DATASET_STYLE Beautify branches","title":"OVERVIEW_STYLE","text":"Degree usability：1.39 Style complexity：3.46 Threshold entry：11 Core index：(5+0)*(0/2) = 0 Diversity index：(3+0+1)/3 = 1.33 这个功能在iTOL里被叫做“Branch label styles”，是否这里要补一句说明？ .function launched “TREE_COLORS” function iTOL. function originally designed solve problem many sub-functions TREE_COLORS integrating original five sub-functions two based positional information. However, function drops widely used range subclass function made input data cumbersome: expanded four columns six columns. complex data parameters make one difficult templates learn use. using DATASET_STYLE, can also cause style overwriting, deleting previously set tree line style, making difficult ordinary users find visual effect take effect expected. optimized version TREE_COLORS launched iTOL v4 accepted users, prefer use old version function. itol.toolkit replaces function new one: users need minimum two columns data output templates, four columns can automatically set program. itol.toolkit, users can use new old versions beautification branch template function smoothly according preferences. can foreseen number itol.toolkit users increases future, number users using new old versions gradually balance. summary, characteristics 2 template functions style class : 1. heavily used 2. Data parameters complex 3. TREE_COLORS powerful DATASET_STYLE class functions, using itol.toolkit can suffer steep learning curve, many difficulties necessary users experience, caused difficulty balancing functionality ease use design iTOL templates. built-automatic workflow itol.toolkit can help users avoid bothered complex data preparation, minimizing burden users. allows users spend energy thinking, resulting fluid data analysis experience.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_TREE_STRUCTURE.html","id":"overview-5-class","dir":"Articles","previous_headings":"","what":"Overview 5 class","title":"OVERVIEW_TREE_STRUCTURE","text":"Based similarity parameters used template similarity template functions, divided 23 templates iTOL v6 5 classes. Tree structure：COLLAPSE, PRUNE, SPACING type：TREE_COLORS, DATASET_STYLE text：LABELS, DATASET_TEXT, DATASET_COLORSTRIP Basic graphics：DATASET_BINARY, DATASET_GRADIENT, DATASET_HEATMAP, DATASET_SYMBOL, DATASET_EXTERNALSHAPE, DATASET_DOMAINS, DATASET_SIMPLEBAR, DATASET_MULTIBAR, DATASET_BOXPLOT, DATASET_LINECHART, DATASET_PIECHART Advanced graphics：DATASET_ALIGNMENT, DATASET_CONNECTION, DATASET_IMAGE, POPUP_INFO section outlines templates belong “tree structures”. Five indicators used evaluate template function different dimensions. five indicators : Usage frequency: average number times template type used published papers calculated logarithmic converted. Style complexity: number style class parameters converted square root conversion. -Input threshold: number data class parameters + number terms multiple choice parameters + number sub-parameters aggregation parameters + number indirect data parameters. infinite items, single item value denoted 5 capping. -Core score: According non-replaceability, degree overlap functions, application potential(used weight), core score given. lowest score 0 points highest score 5 points. -Diversity score: According frequency collaboration templates, scalability functions, diversity functional application scenarios, diversity score given. lowest score item 0 points highest score 5 points. 0 points indicate function monotonous, 5 points indicate function diverse","code":"library(itol.toolkit) df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) df_frequence <- data.frame(template = df_frequence$templates,                             value = rowSums(df_frequence[,-1],na.rm = T)) df_frequence$value <- round(log(df_frequence$value+1),2) data(\"template_parameters_count\") round(sqrt(rowSums(template_parameters_count[,1:113])+1),2) data(\"template_parameters_count\") rowSums(template_parameters_count[,114:148])"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_TREE_STRUCTURE.html","id":"collapse-folded-branch","dir":"Articles","previous_headings":"","what":"COLLAPSE Folded branch","title":"OVERVIEW_TREE_STRUCTURE","text":"Usage frequency：1.10 Style complexity：1 Input threshold：1 Core score：(1+1)*(1.10/2)=1.1 Diversity score：(1+0+0)/3 = 0.33 COLLAPSE directly controls branch aggregation irreplaceable. However, function works within software, change raw tree file. feature relatively simple intergrated features. less used thus core feature iTOL. basic function displayed control panel, function rarely cooperates functions. Moreover, support extended functions. application scenario function also fixed. itol.toolkit implements full set automated processing parameters function, including extracting, output, editing, saving. Please refer COLLAPSE single function document details","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_TREE_STRUCTURE.html","id":"prune-choose-a-branch","dir":"Articles","previous_headings":"","what":"PRUNE Choose a branch","title":"OVERVIEW_TREE_STRUCTURE","text":"Usage frequency：0 Style complexity：1 Input threshold：1 Core score：(0+1)*(1/2)=0.5 Diversity score：(1+0+0)/3 = 0.33 Although PRUNE function actually used published papers, still potential used optimize reproduction iTOL charts. feature can replaced number similar tools, asape::drop.tip, branch selection step processing, irreplaceable. However, function exists standalone feature integrated template features. summary, function core function iTOL.time, basic function displayed control panel, function rarely cooperates functions, support extended functions. application scenario also relatively fixed. itol.toolkit implements full set automated processing parameters function, including extracting, output, editing, saving. Please refer PRUNE single function document details","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/OVERVIEW_TREE_STRUCTURE.html","id":"spacing-adjusting-the-spacing","dir":"Articles","previous_headings":"","what":"SPACING Adjusting the spacing","title":"OVERVIEW_TREE_STRUCTURE","text":"Usage frequency：0 Style complexity：1.41 Input threshold：2 Core score：(1+1)*(0/2)=0 Diversity score：(0+0+0)/3 = 0 SPACING feature actually used published papers found potential used. function found use case, replaceable, core function iTOL. support extension functions independent function. itol.toolkit implements full set automated processing parameters function, including extracting, output, editing, saving. Please refer SPACING single function document details sum , three template functions tree structure class similarities following areas: Simple parameters core function Single application scenario type function, although using itol.toolkit give users great improvement experience, also included order support completeness iTOL functions can assist iTOL’s full application scenarios.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/POPUP_INFO.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"POPUP_INFO","text":"POPUP_INFO template display additional information popup windows appear hovering mouse pointer tree nodes labels. DATASET_GRADIENT template belongs “Advanced graphics” class (refer Class detail information). tree node ID, users can define popup title content. Content can plain text valid HTML (including links external web sites, IMG tags pointing external images). section describes itol.toolkit prepare popup info templates.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/POPUP_INFO.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"POPUP_INFO","text":"first step load newick format tree file tree_of_itol_templates.tree.","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/POPUP_INFO.html","id":"data-processing-and-create-the-unit","dir":"Articles","previous_headings":"","what":"Data processing and create the unit","title":"POPUP_INFO","text":"Using POPUP_INFO, need tip/nodes names, corresponding image URLs . recommended users use convenient methods organize data (tidyverse workflow). course, can also enter branch node name INFO URL directly R environment via data.frame() function, follows: Popup info visualization example","code":"df_data <- data.frame(ids = \"POPUP_INFO\",                        text = \"POPUP_INFO\",                       content= \"<h2>POPUP_INFO<\/h2>\") unit_45 <- create_unit(data = df_data,                      key = \"E045_popupinfo_1\",                      type = \"POPUP_INFO\",                     tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/PRUNE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PRUNE","text":"function PRUNE template select branches. PRUNE template belongs “Tree structure” class (refer Class detail information). Generally, users can select one branch branches within node entering branch node name. selected branch included new phylogenetic tree, unselected branch excluded. function template function changes number branches. section shows select branches itol.toolkit. process simple, main difficulty user needs determine branches filtered. Without itol.toolkit, users perform data analysis visualization preparation fragmented environments. itol.toolkit provides consistency workflow, allowing users filter branches output template files seamlessly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/PRUNE.html","id":"prune-nodes","dir":"Articles","previous_headings":"","what":"Prune nodes","title":"PRUNE","text":"section uses dataset 1 example. (refer Dataset detail information) first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence template_parameters_count. purpose data processing section demonstrate select labels pruned according users’ demands. can use node branch names filter branches. example, select two types templates commonly used complex parameters: “theme_style” “basic_plot”. Prune example 1: used complex templates can also filter branches according names. example, E004 selects branches beginning “DATASET_”, typically complex parameter format template requirements. Prune example 2: DATASET_ branches selection can also filter branches based information. example, used template_parameters_count data filter templates 30 parameters unit_5. Prune example 3: Templates 30 parameters","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) data(\"template_parameters_count\") ids <- df_frequence$templates df_frequence[df_frequence > 1] <- 1  df_frequence$templates <- ids most_used_tip = df_frequence$templates[which.max(rowSums(df_frequence[,-1],                                                          na.rm = T))] select_item = c(most_used_tip, \"theme_style\",\"basic_plot\") unit_3 <- create_unit(data = select_item,                        key = \"E003_prune_1\",                        type = \"PRUNE\",                        tree = tree) write_unit(unit_3) select_tip = hub@tree$main$tip.label[startsWith(hub@tree$main$tip.label,                                                 \"DATASET_\")] unit_4 <- create_unit(data = select_tip,                                   key = \"E004_prune_2\",                                   type = \"PRUNE\",                                   tree = tree) write_unit(unit_4) tpc <- template_parameters_count select_tip = row.names(tpc)[rowSums(tpc) > 30] unit_5 <- create_unit(data = select_tip,                        key = \"E005_prune_3\",                        type = \"PRUNE\",                        tree = tree) write_unit(unit_5)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/PRUNE.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"PRUNE","text":"function changes topology tree, PRUNE typically exists pre processing stage workflow, reflected published papers. However, R language users likely use ape::drop.tip achieve requirement, application prospects template worrying. Unless users need avoid relying much tools, possible use function demand.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/SPACING.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SPACING","text":"function SPACING template adjust branch spacing. parameter structure simple, consisting template types data. SPACING template belongs “Tree structure” class (refer Class detail information). Users typically adjust spacing branches entering branch names spacing values. function template simple. section shows use itol.toolkit adjust spacing branches. process simple, main difficulty user needs determine branches need adjusted. Without itol.toolkit, users perform data analysis visualization preparation fragmented environments. itol.toolkit provides consistency workflow, allowing users filter branches based background information R environment output template files seamlessly.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/SPACING.html","id":"basic-use","dir":"Articles","previous_headings":"","what":"Basic use","title":"SPACING","text":"section uses dataset 1 example. (refer Dataset detail information) first step load newick . following example data df_frequence contains usage template type published studies. purpose data processing section adjust spacing branches.Based usage data, greater usage, greater spacing template types. Sum frequency template type used published papers. order make text content clear, global font size adjusted 35 iTOL console, rotation 180 degrees, included angle 180 degrees. avoid overlapping resizing fonts, set base spacing 2. final data two columns: tip id corresponding space. Branch spacing adjustment example","code":"library(itol.toolkit) library(data.table) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- fread(system.file(\"extdata\",                                   \"templates_frequence.txt\",                                   package = \"itol.toolkit\")) df_frequence <- data.frame(template = df_frequence$templates,                             value = rowSums(df_frequence[,-1],na.rm = T) + 2) unit_6 <- create_unit(data = df_frequence,                        key = \"E006_spacing_1\",                       type = \"SPACING\",                        tree = tree) write_unit(unit_6)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/SPACING.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"SPACING","text":"SPACING template function author think practical use. actual effect function far authors expected (highlight key points). upper lower intervals branch can defined, function can practical use. can explore use function, welcome contact . function also one support node level manipulation. ’s surprising usage rate feature low.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/TREE_COLORS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"TREE_COLORS","text":"TREE_COLORS allows set style branches level. five attributes: “range”, “clade”, “branch”, “label”, “label_background”. style parameters simple TREE_COLORS, data parameters extremely complex. Style template belongs “Tree structure” class (refer Class detail information). set style branch node, users must enter name branch tip node attribute color, label, style, size.selected branch display new styles defined specified attribute. Although function provides comprehensive templates modifying tree style, complexity data parameters proves great challenge users. section shows use itol.toolkit modify style. itol.toolkit significantly reduces difficulty level using iTOL enabling automatic data recognition. Without itol.toolkit, users organize various attribute parameters corresponding input data manually. itol.toolkit, entire workflow becomes cohesive, users can directly output template files confirmed data use.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/TREE_COLORS.html","id":"regular-flow","dir":"Articles","previous_headings":"","what":"Regular flow","title":"TREE_COLORS","text":"section uses dataset 1 example show draw line chart. (refer Dataset detail information)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/TREE_COLORS.html","id":"load-data","dir":"Articles","previous_headings":"Regular flow","what":"Load data","title":"TREE_COLORS","text":"first step load newick format tree file tree_of_itol_templates.tree corresponding metadata df_frequence. user enters four columns, program figure subclass color. can use “range” attribute set color tip label area. Unlike “label_background” attribute, “range” attribute color action range consistent area label. unit_7, use two columns show hot use function. attribute fed subtype parameter. Based input data, create_unit function treat first column tip id, second columns “range” information (whatever header ). Moreover, color also generated second column input data. Also, colors can defined using color parameter. result, program handle possible cases automatically, lowering threshold users preparing input data. Tree colors visualization example 1 can use “clade” attribute apply color adjustments branches contained node . Like unit_7, used 2 columns data implement “branch” attribute unit_8. attribute fed subtype parameter. line type defined line_type parameter, controls whether line dotted line , define different line types set vectors. line thickness defined size_factor parameter. unit_8, five discrete colors generated according second column input data, five groups. Colors can also defined using color parameter. Tree colors visualization example 2 can use “branch” attribute adjust color node tip like “clade” attribute. However, “branch” attribute broadcast settings offspring branches. See unit_9 Tree colors visualization example 3 can use “label” attribute adjust colors font styles branch level. also used 2 columns data implement “branch” attribute unit_10. font type defined font_type parameter, controls whether lines bold italic; font size defined size_factor parameter. Tree colors visualization example 4 can use “label_background” attribute adjust color scheme label background branch level. used 2 columns information show implement “label_background” attribute unit_11. Usually, background uniform color, color parameter defines single color. However, can set different colors entering vector colors. color set, itol.toolkit automatically set colors based data. practice, ’s important note backgrounds often don’t work first time drag iTOL, need switch ring, rectangle, unrooted tree types make work. Tree colors visualization example 5 templates, TREE_COLORS one frequently used function highly recommended authors. itol.toolkit enables users make fewer mistakes, save effort complex function data preparation.","code":"library(itol.toolkit) tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") hub <- create_hub(tree = tree) data(\"template_groups\") unit_7 <- create_unit(data = template_groups,                        key = \"E007_tree_colors_1\",                        type = \"TREE_COLORS\",                        subtype = \"range\",                        tree = tree) write_unit(unit_7) df_data <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) unit_8 <- create_unit(data = df_data,                        key = \"E008_tree_colors_2\",                        type = \"TREE_COLORS\",                        subtype = \"clade\",                        line_type = c(rep(\"normal\",4),\"dashed\"),                       size_factor = 5,                        tree = tree) write_unit(unit_8) unit_9 <- create_unit(data = df_data,                        key = \"E009_tree_colors_3\",                        type = \"TREE_COLORS\",                        subtype = \"branch\",                        line_type = c(rep(\"normal\",4),\"dashed\"),                       size_factor = 5,                        tree = tree) write_unit(unit_9) unit_10 <- create_unit(data = template_groups,                        key = \"E010_tree_colors_4\",                         type = \"TREE_COLORS\",                         subtype = \"label\",                         font_type = \"bold-italic\",                        size_factor = 2,                         tree = tree) write_unit(unit_10) unit_11 <- create_unit(data = template_groups,                         key = \"E011_tree_colors_5\",                         type = \"TREE_COLORS\",                         subtype = \"label_background\",                        color = \"#000000\",                         tree = tree) write_unit(unit_11)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tree_construction","text":"Users need tree newick format using iTOL itol.toolkit. Phylogenetic trees clustering trees common types trees. Phylogenetic trees usually constructed based nucleic acid sequences amino acid sequences using character-based methods, maximum likelihood (ML) method. However, users can cluster samples numeric matrix using hierarchical clustering method well. itol.toolkit provides basic clustering tree construction methods, allowing users build trees based numeric matrix using weighted unweighted methods.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"tree-construction","dir":"Articles","previous_headings":"","what":"Tree construction","title":"tree_construction","text":"section uses dataset 1 demonstrate method constructing clustering tree newick format hierarchical clustering (refer Dataset detail information). demonstrate construct tree using unweighted weighted methods using parameters class template.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"data-preparation","dir":"Articles","previous_headings":"Tree construction","what":"Data preparation","title":"tree_construction","text":"practice users need prepare numeric matrix tree construction, want using weighted method, grouping information needed.","code":"library(itol.toolkit) library(data.table) library(dplyr) file = system.file(\"extdata\",                    \"iTOL_template_parameters_matrix.txt\",                    package = \"itol.toolkit\") template_parameters_count <- fread(file) order <- names(template_parameters_count)[-1] template_parameters_count <- template_parameters_count[,-1] template_parameters_count <- convert_01(object = template_parameters_count) %>%                              t() %>%                              as.data.frame()"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"unweighted-clustering","dir":"Articles","previous_headings":"Tree construction","what":"Unweighted Clustering","title":"tree_construction","text":"unweighted clustering, users need import numeric matrix.","code":"cluster_tree <- count_to_tree(count = template_parameters_count) plot(cluster_tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"weighted-clustering","dir":"Articles","previous_headings":"Tree construction","what":"Weighted Clustering","title":"tree_construction","text":"weighted clustering, users need specify grouping information weight “group” “weight” parameters.","code":"data(\"template_groups\") template_groups <- template_groups %>%                    mutate(template =  factor(template, levels = order)) %>%                    arrange(template) cluster_tree <- count_to_tree(count = template_parameters_count,                               group = template_groups$group,                               weight = 1) plot(cluster_tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"save-tree","dir":"Articles","previous_headings":"Tree construction","what":"Save Tree","title":"tree_construction","text":"tree built, user needs export tree newick file importing iTOL, etc.","code":"write.tree(cluster_tree, paste0(getwd(), \"/tree_of_itol_templates.tree\"))"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/tree_construction.html","id":"other-methods","dir":"Articles","previous_headings":"","what":"Other Methods","title":"tree_construction","text":"Users can also perform hierarchical clustering cluster package. using cluster package’s agnes() function clustering, users need specify method used calculate dissimilarity clusters. calculate agglomerative coefficient method writing short function finally choose method value closest 1. selecting best method, user can construct clustering tree agnes() function.","code":"library(cluster) #define linkage methods m <- c( \"average\", \"single\", \"complete\", \"ward\") names(m) <- c( \"average\", \"single\", \"complete\", \"ward\")  #function to compute agglomerative coefficient ac <- function(x) {   agnes(template_parameters_count, method = x)$ac }  #calculate agglomerative coefficient for each clustering linkage method sapply(m, ac) cluster_tree <- agnes(template_parameters_count, method = \"ward\") plot(cluster_tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.10.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"v1.1.10","text":"Updates: New: Correcting spelling type parameter. Update: Beautifying loading prompt format. Update: Fixing SHOW_VALUE output parameter simplebar unit.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.10.html","id":"correcting-the-spelling-of-the-type-parameter","dir":"Articles","previous_headings":"","what":"1. Correcting the Spelling of the type Parameter","title":"v1.1.10","text":"feature can used simplify process reduce error rates. example, DATASET_COLORSTRIP, supports partial input, case insensitivity, recognition misspellings.","code":"library(itol.toolkit) ## ## ── Loading ────────────────────────────────────────────── itol.toolkit 1.1.11 ── ## ## If you use the itol.toolkit package in published research, please cite: ## ## Zhou, T., Xu, K., Zhao, F., Liu, W., Li, L., Hua, Z., & Zhou, X. (2023). ## itol.toolkit accelerates working with iTOL (Interactive Tree of Life) by an ## automated generation of annotation files. Bioinformatics, 39(6), btad339. # read data tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                         data = unique(template_groups$group))  # 1. Partial input \"COLORSTRIP\" can be correctly recognized unit <- create_unit(data = df_group,                      key = \"Quickstart\",                      type = \"COLORSTRIP\",                      tree = tree) ## Using default color pattern: table2itol # [1] \"DATASET_COLORSTRIP\"  # 2. Partial input \"STRIP\" can be correctly recognized unit <- create_unit(data = df_group,                      key = \"Quickstart\",                      type = \"STRIP\",                      tree = tree) ## Using default color pattern: table2itol # [1] \"DATASET_COLORSTRIP\"  # 3. Lowercase input \"strip\" can be correctly recognized unit <- create_unit(data = df_group,                      key = \"Quickstart\",                      type = \"strip\",                      tree = tree) ## Using default color pattern: table2itol # [1] \"DATASET_COLORSTRIP\"  # 4. Misspelled input \"strib\" can be correctly recognized unit <- create_unit(data = df_group,                      key = \"Quickstart\",                      type = \"strib\",                      tree = tree) ## Using default color pattern: table2itol # [1] \"DATASET_COLORSTRIP\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.10.html","id":"optimizing-loading-prompts","dir":"Articles","previous_headings":"","what":"2. Optimizing Loading Prompts","title":"v1.1.10","text":"previous loading prompts red, mislead users thinking error. Therefore, font color optimized, content still serves reminder properly cite papers.","code":"# You can try running it to see the actual effect library(itol.toolkit) # ── Loading ───────────────────────────────────────── itol.toolkit 1.1.9 ── # # If you use the itol.toolkit package in published research, please cite: # # Zhou, T., Xu, K., Zhao, F., Liu, W., Li, L., Hua, Z., & Zhou, X. (2023). # itol.toolkit accelerates working with iTOL (Interactive Tree of Life) by an # automated generation of annotation files. Bioinformatics, 39(6), btad339."},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.10.html","id":"correcting-the-show_value-output-for-simplebar","dir":"Articles","previous_headings":"","what":"3. Correcting the SHOW_VALUE Output for Simplebar","title":"v1.1.10","text":"issue identified creation DATASET_SIMPLEBAR unit, output parameter value_display incorrectly set SHOW_VALUES instead SHOW_VALUE. Setting unit_3@specific_themes$basic_plot$value_display <- 1 previously generated field SHOW_VALUES 1, iTOL web template requires SHOW_VALUE 1. extra “S” field name prevented setting properly recognized. reviewing show_value setting across templates, confirmed DATASET_SIMPLEBAR requires SHOW_VALUE, templates continue use SHOW_VALUES.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"v1.1.11","text":"Updates: New: Added dual-factor coloring support binary dataset visualization. Fix: Fixed legend order issues DATASET_COLORSTRIP, DATASET_SYMBOL, DATASET_DOMAINS functions.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"dual-factor-coloring-for-binary-dataset","dir":"Articles","previous_headings":"","what":"1. Dual-Factor Coloring for Binary Dataset","title":"v1.1.11","text":"Added support dual-factor coloring binary dataset visualization, allowing users create informative visually appealing visualizations.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"data-preparation","dir":"Articles","previous_headings":"1. Dual-Factor Coloring for Binary Dataset","what":"Data Preparation","title":"v1.1.11","text":"","code":"# Set working directory for output files setwd(\"~/Downloads/\")  # Load required libraries library(itol.toolkit)    # Main package for iTOL visualization library(dplyr)           # Data manipulation and transformation library(data.table)      # Fast file reading and data operations library(ape)             # Phylogenetic tree operations library(stringr)         # String manipulation utilities library(tidyr)           # Data tidying and reshaping  # Load example data files tree_1 <- system.file(\"extdata\", \"dataset4/otus.contree\", package = \"itol.toolkit\") data_file_1 <- system.file(\"extdata\", \"dataset4/annotation.txt\", package = \"itol.toolkit\") data_file_2 <- system.file(\"extdata\", \"dataset4/otutab_high.mean\", package = \"itol.toolkit\")  # Read data files data_1 <- data.table::fread(data_file_1) data_2 <- data.table::fread(data_file_2)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"domain-visualization","dir":"Articles","previous_headings":"1. Dual-Factor Coloring for Binary Dataset","what":"Domain Visualization","title":"v1.1.11","text":"Demonstrate existing domain annotation feature supports dual-factor coloring:","code":"set.seed(123)  # Set random seed for reproducible results  # Create domain annotation unit with dual-factor coloring support unit_6 <- create_unit(   data = data_1 %>% select(ID, Class, Family),   key = \"New_in_v1.1.8\",   type = \"DATASET_DOMAINS\",   color = \"wesanderson\",   shape = \"TL\",   tree = tree_1 )"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"binary-data-processing","dir":"Articles","previous_headings":"1. Dual-Factor Coloring for Binary Dataset","what":"Binary Data Processing","title":"v1.1.11","text":"","code":"# Function to generate fluctuating columns for demonstration generate_fluctuation_columns <- function(df, base_col, num_cols, fluctuation_range) {   set.seed(123)  # Ensure reproducible results      for (i in 1:num_cols) {     col_name <- paste0(base_col, \"_\", i)     # Generate values with random fluctuation around the base column     df[[col_name]] <- df[[base_col]] * (1 + runif(nrow(df), -fluctuation_range, fluctuation_range))   }   return(df) }  # Prepare data for binary visualization # Select relevant columns and generate multiple samples data_3 <- data_1 %>% select(ID, Asia, North_America, South_America)  # Generate 20 columns for each region with ±15% fluctuation data_3 <- generate_fluctuation_columns(data_3, \"Asia\", 20, 0.15) data_3 <- generate_fluctuation_columns(data_3, \"North_America\", 20, 0.15) data_3 <- generate_fluctuation_columns(data_3, \"South_America\", 20, 0.15)  # Round numeric values for cleaner visualization data_3[, 2:ncol(data_3)] <- round(data_3[, 2:ncol(data_3)])  # Enhanced data transposition function transpose_with_first_column_as_header <- function(dt) {   # Input validation   if (!is.data.table(dt)) {     stop(\"Input must be a data.table object.\")   }      # Extract first column values as new column names   new_col_names <- dt[[1]]      # Transpose the data (excluding the first column)   transposed_dt <- transpose(dt[, -1, with = FALSE])      # Set column names from the first column data   setnames(transposed_dt, new_col_names)      # Add original column names as a new \"Sample\" column   transposed_dt[, \"Sample\" := names(dt)[-1]]      # Reorder columns to put Sample column first   setcolorder(transposed_dt, c(\"Sample\", new_col_names))      return(transposed_dt) }  # Apply transposition and prepare for binary visualization data_3_t <- transpose_with_first_column_as_header(data_3)  # Clean sample names and sort for better organization data_3_t <- data_3_t %>%    mutate(group = stringr::str_remove(stringr::str_remove(Sample, \"\\\\d+$\"), \"_$\")) %>%    arrange(Sample)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"binary-unit-creation","dir":"Articles","previous_headings":"1. Dual-Factor Coloring for Binary Dataset","what":"Binary Unit Creation","title":"v1.1.11","text":"Create binary visualization unit enhanced styling:","code":"# Create binary dataset unit with improved parameters unit_7 <- create_unit(   data = data_3,   key = \"New_in_v1.1.11\",   type = \"DATASET_BINARY\",   color = \"wesanderson\",   tree = tree_1 )  # Customize symbol height for optimal visualization unit_7@specific_themes$basic_plot$height_factor <- 0.4"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"output-generation","dir":"Articles","previous_headings":"1. Dual-Factor Coloring for Binary Dataset","what":"Output Generation","title":"v1.1.11","text":"Combine units generate final output: Version 1.1.11 update overview","code":"# Create hub object and combine all visualization units hub_1 <- create_hub(tree_1) hub_1 <- hub_1 + unit_6 + unit_7  # Write output files with tree data write_hub(hub_1, \"~/Downloads/\", with_tree = TRUE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"legend-order-fixes","dir":"Articles","previous_headings":"","what":"2. Legend Order Fixes","title":"v1.1.11","text":"Fixed legend ordering issues specific dataset functions ensure consistent behavior user input data.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"problem-description","dir":"Articles","previous_headings":"2. Legend Order Fixes","what":"Problem Description","title":"v1.1.11","text":"Previously, legends ordered alphabetically using levels(.factor()), causing: - Color, shape, label orders inconsistent - Users predict final legend order - Poor user experience confusion","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"affected-functions","dir":"Articles","previous_headings":"2. Legend Order Fixes","what":"Affected Functions","title":"v1.1.11","text":"DATASET_COLORSTRIP: Fixed color label order mismatch DATASET_SYMBOL: Fixed shape, color, label order mismatch DATASET_DOMAINS: Fixed shape, color, label order mismatch","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"solution-implementation","dir":"Articles","previous_headings":"2. Legend Order Fixes","what":"Solution Implementation","title":"v1.1.11","text":"fixes use unified approach maintain original data frame order:","code":"# Before (problematic code) common_themes$legend$colors <- levels(as.factor(color)) common_themes$legend$labels <- levels(as.factor(data[[colname_data]]))  # After (fixed code) # Get unique labels and corresponding attributes, preserving original order unique_data <- data.frame(   label = data[[colname_data]],    color = color,    shape = shape,  # if applicable   stringsAsFactors = FALSE ) unique_data <- unique_data[!duplicated(unique_data$label), ]  common_themes$legend$colors <- unique_data$color common_themes$legend$labels <- unique_data$label common_themes$legend$shapes <- unique_data$shape  # if applicable"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"example-usage","dir":"Articles","previous_headings":"2. Legend Order Fixes","what":"Example Usage","title":"v1.1.11","text":"","code":"# Load required libraries library(itol.toolkit) library(tibble)  # Define tree structure (example) tree <- \"((tip1,tip2),(tip3,tip4));\"  # Define colors in desired order shed_color <- tribble(   ~Shed, ~Shed_color,   \"Farm A shed 3\", \"#aec7e8\",    # Will appear first in legend   \"Farm A shed 6\", \"#1f77b4\"     # Will appear second in legend )  # Create sample data frame df <- data.frame(   id = c(\"tip1\", \"tip2\", \"tip3\", \"tip4\"),   Shed = c(\"Farm A shed 3\", \"Farm A shed 6\", \"Farm A shed 3\", \"Farm A shed 6\") )  # Create unit - legend order will match your data frame order unit <- create_unit(data = df,   key = \"color_shed_colorstrip\",   type = \"DATASET_COLORSTRIP\",   tree = tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.11.html","id":"benefits","dir":"Articles","previous_headings":"2. Legend Order Fixes","what":"Benefits","title":"v1.1.11","text":"Consistent Ordering: Legend order now matches user-defined data frame order User Control: Users can control legend order arranging data frames Reliable Behavior: affected functions now behave consistently Better Alignment: Colors, shapes, labels maintain proper correspondence","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"v1.1.9","text":"Key updates v1.1.9: Fix: Meaningless warning simplebar template. Fix: Clustering error input single column heatmap. New: Support outputting trees Hub. Fix: Bug multiple heatmap units used together. New: Color sorting algorithm, supports custom root node color. New: Two tree-building methods (based string vectors data frame row/column names). Document Format Notes: document converted English future. Blockquotes contain error messages; code blocks contain either user-side code source code, line numbers source code differentiate user-side code.","code":""},{"path":[]},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-description","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 1. Fixing the Warning in the Simplebar Template","what":"Problem Description","title":"v1.1.9","text":"creating DATASET_SIMPLEBAR unit create_unit, example: versions v1.1.8 earlier, following warning triggered: Warning mean.default(data) : argument numeric logical: returning NA generated template file might contain something like : DATASET_SCALE 0.009113938 NA 4.09978","code":"library(itol.toolkit) # main package library(dplyr) # data manipulation library(data.table) # file read  tree_1 <- system.file(\"extdata\",\"dataset4/otus.contree\",package = \"itol.toolkit\")  data_file_1 <- system.file(\"extdata\",\"dataset4/annotation.txt\",package = \"itol.toolkit\")  data_1 <- data.table::fread(data_file_1)  # simple_bar by NS unit_4 <- create_unit(data = data_1 %>% select(ID, Asia),                       key = \"rep_Zhou_4_multibar\",                       type = \"DATASET_SIMPLEBAR\",                       tree = tree_1)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-investigation","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 1. Fixing the Warning in the Simplebar Template","what":"Problem Investigation","title":"v1.1.9","text":"using mean directly, since selected data frame purely numeric vector, result calculated. Thus, solution convert data frame vector, calculate mean rows columns, yield numeric vector resolve issue: fix issue, change code line 1364 user.R :","code":"data_1 %>% select(Asia) %>% mean() data_1 %>% select(North_America, Asia) %>% mean() # Returns:  # [1] NA # Warning message: # In mean.default(.) : argument is not numeric or logical: returning NA data_1 %>% select(North_America, Asia) %>% rowMeans() %>% mean() data_1 %>% select(North_America, Asia) %>% colMeans() %>% mean() # [1] 0.2529557  # Also works for single-column data: data_1 %>% select(Asia) %>% rowMeans() %>% mean() # [1] 0.2657 mean <- data %>% rowMeans() %>% mean()"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"further-thoughts","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 1. Fixing the Warning in the Simplebar Template","what":"Further Thoughts","title":"v1.1.9","text":"gradient template, mean() trigger similar issue gradient require scale value, instead automatically generates legend. future, unified function designed handle scale information different templates.","code":""},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-description-1","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 2. Fixing the Clustering Error When Heatmap Input is a Single Column","what":"Problem Description","title":"v1.1.9","text":"heatmaps typically take multi-column data input, single-column heatmaps can replaced gradient, single-column heatmaps still offer adjustable parameters. Hence, users still use single-column heatmap feature. However, calling create_unit create unit, error thrown:","code":"unit_6 <- create_unit(data = data_1 %>% select(ID, Asia),                       key = \"rep_Zhou_6_multibar\",                       type = \"DATASET_HEATMAP\",                       tree = tree_1) # Error in hclust(dist(t(data %>% select(field_names)))) :  #   must have n >= 2 objects to cluster"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-investigation-1","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 2. Fixing the Clustering Error When Heatmap Input is a Single Column","what":"Problem Investigation","title":"v1.1.9","text":"hclust used clustering, input data one column, clustering performed, leading error generating field tree. Therefore, conditional check added near line 959 user.R skip field tree generation input single column: ensures template file generated successfully without errors. However, submitting updated template iTOL, following message displayed: Leaf ‘undefined’ heatmap field tree present FIELD_LABELS. Field label ‘Asia’ present heatmap field tree. Failed parse FIELD_TREE. Make sure Newick format. occurs , field tree empty, automatically inherits style template content. Since updating logic style template inheritance requires system-level review, issue temporarily resolved skipping field tree output input single column. following changes made user.R line 969 output.R line 230:","code":"if(length(names(data)) == 2){   field_tree <- NULL }else{   field_tree <- write.tree(ape::as.phylo(hclust(dist(t(data %>% select(field_names)))))) } # user.R L969 if(length(names(data)) == 2){   specific_themes[[\"heatmap\"]][[\"tree\"]][[\"tree_display\"]] <- 0 }else{   specific_themes[[\"heatmap\"]][[\"tree\"]][[\"tree\"]] <- field_tree }  # output.R L230 if (!is.null(unit@specific_themes$heatmap$tree$tree)) {   if(unit@specific_themes$heatmap$tree$tree_display == 1){     lines <- c(lines, paste(\"FIELD_TREE\", paste(unit@specific_themes$heatmap$tree$tree, collapse = unit@sep), sep = unit@sep))   } }"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-description-2","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 3. Fixing the Issue with Addition of Multiple Units","what":"Problem Description","title":"v1.1.9","text":"Due previous version’s limitation, write_hub output template files bulk without outputting tree files, made difficult beginners locate tree files within package. make easier users obtain files uploading iTOL , write_hub function v1.1.9 introduces with_tree parameter. with_tree = TRUE, tree files also outputted. parameter defaults FALSE maintain backward compatibility. However, versions v1.1.8 earlier, running might cause error:","code":"hub_1 <- create_hub(tree_1) hub_1 <- hub_1 + unit_4 + unit_5 + unit_6 write_hub(hub_1, \"~/Downloads/\", with_tree = T) # No error with the following: hub_1 <- hub_1 + unit_4 #+ unit_5 + unit_6 hub_1 <- (hub_1 + unit_4) + unit_5 #+ unit_6  # Error with the following: hub_1 <- ((hub_1 + unit_4) + unit_5) + unit_6 # Error in UseMethod(\"tbl_vars\") :  # no applicable method for 'tbl_vars' applied to an object of class \"c('double', 'numeric')\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"problem-investigation-2","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 3. Fixing the Issue with Addition of Multiple Units","what":"Problem Investigation","title":"v1.1.9","text":"error occurs heatmap merged hub, data format data.table, results format conversion error. fix , add format conversion line 1352 learn.R:","code":"abundance <- as.data.frame(abundance)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"color-sorting-algorithm","dir":"Articles","previous_headings":"Feature Details and Problem Analysis","what":"4. Color Sorting Algorithm","title":"v1.1.9","text":"color sorting algorithm supported, allowing users define custom sorting rules sort_color() method specify reference color sorting. feature still explored, concrete examples provided future.","code":"set.seed(123) colors <- get_color(10,set = \"wesanderson\") sort_color(colors,plot = T, root=\"#FF0000\") ##  [1] \"#CEB175\" \"#EBCC2A\" \"#FF0000\" \"#C18748\" \"#F1BB7B\" \"#BDC881\" \"#FAEFD1\" ##  [8] \"#02401B\" \"#54D8B1\" \"#9986A5\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"new-tree-building-methods","dir":"Articles","previous_headings":"Feature Details and Problem Analysis","what":"5. New Tree-Building Methods","title":"v1.1.9","text":"feature still exploration stage, concrete examples provided later. Method 2 optimized.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"method-1-based-on-string-vector","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 5. New Tree-Building Methods","what":"Method 1: Based on String Vector","title":"v1.1.9","text":"Generate tree directly template string:","code":"data(\"template_groups\") plot(vector_tree(template_groups$template))"},{"path":"https://tongzhou2017.github.io/itol.toolkit/articles/v1.1.9.html","id":"method-2-based-on-data-frame-rowcolumn-names","dir":"Articles","previous_headings":"Feature Details and Problem Analysis > 5. New Tree-Building Methods","what":"Method 2: Based on Data Frame Row/Column Names","title":"v1.1.9","text":"Generate tree based row column names data frame:","code":"data(\"template_parameters_count\") plot(template_parameters_count[c(\"TREE_COLORS\",\"DATASET_STYLE\",\"DATASET_COLORSTRIP\"),1:5] %>% df_tree(main = \"row\"))"},{"path":"https://tongzhou2017.github.io/itol.toolkit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tong Zhou. Author, maintainer.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhou T (2025). itol.toolkit: Helper Functions 'Interactive Tree Life'. R package version 1.1.11, https://tongzhou2017.github.io/itol.toolkit/.","code":"@Manual{,   title = {itol.toolkit: Helper Functions for 'Interactive Tree Of Life'},   author = {Tong Zhou},   year = {2025},   note = {R package version 1.1.11},   url = {https://tongzhou2017.github.io/itol.toolkit/}, }"},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Helper Functions for Interactive Tree Of Life","text":"Support 114 themes among 23 template types iTOL v6 High throughput generate templates one command Learn published template themes use theme Save --one reproducible data locally","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Helper Functions for Interactive Tree Of Life","text":"Based dependence packages CRAN Bioconductor source. recommend use pak install itol.toolkit package automatically avoid problems. install stable versions, can use CRAN official repository. development versions, can use GitHub repository. However, need install packages Bioconductor, ’ll need use BiocManager package. encounter issues installation process, problems caused systems, R versions, dependency packages, please refer supplementary materials solution.","code":"install.packages(\"pak\")  # from CRAN pak::pak('itol.toolkit')  # from GitHub pak::pak('TongZhou2017/itol.toolkit') # install Biostrings # install.packages(\"BiocManager\") BiocManager::install(\"Biostrings\")  # from CRAN install.packages(\"itol.toolkit\")  # from GitHub # install.packages(\"devtools\") # if you have not installed \"devtools\" package devtools::install_github(\"TongZhou2017/itol.toolkit\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Helper Functions for Interactive Tree Of Life","text":"","code":"# load package library(itol.toolkit)  # read data tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                         data = unique(template_groups$group))  # create hub hub <- create_hub(tree = tree)  ## create unit unit <- create_unit(data = df_group,                      key = \"Quickstart\",                      type = \"DATASET_COLORSTRIP\",                      tree = tree)  ## add unit into hub hub <- hub + unit  ## write template file write_hub(hub,getwd())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"documents","dir":"","previous_headings":"","what":"Documents","title":"Helper Functions for Interactive Tree Of Life","text":"documents every single function important tips users.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"single-functions","dir":"","previous_headings":"Documents","what":"Single functions","title":"Helper Functions for Interactive Tree Of Life","text":"COLLAPSE: collapse branches range id node id. PRUNE: drop branches. SPACING: adjust branch spacing. TREE_COLORS: set branch style range, clade, branch, label, background level. DATASET_STYLE: set branch style branch label level. LABELS: change node name. DATASET_TEXT: add text HTML. DATASET_COLORSTRIP: add color strip text. DATASET_BINARY: multi columns one shape symbol. DATASET_GRADIENT: one column heatmap. DATASET_HEATMAP: heatmap field tree. DATASET_SYMBOL: internal tree one column multi shape symbol. DATASET_EXTERNALSHAPE: outside multi column multi shape symbol. DATASET_DOMAINS: strucutre multi shape symbol. DATASET_SIMPLEBAR: bar plot. DATASET_MULTIBAR: multi bar plot. DATASET_BOXPLOT: box plot. DATASET_LINECHART: line plot. DATASET_PIECHART: pie plot. DATASET_ALIGNMENT: sequence alignment. DATASET_CONNECTIONS: network braches. DATASET_IMAGE: add image. POPUP_INFO: interactive external information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"tips","dir":"","previous_headings":"Documents","what":"Tips","title":"Helper Functions for Interactive Tree Of Life","text":"Overview: overview functions. Installation: FAQ installation. Datasets: overview 5 example datasets demo. Colors: buildin color palette. Data reproduction: learn data template files. VS table2itol: compare iTOL helper tool, table2itol. Tree construction: create tree different data methods.","code":""},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"gallery","dir":"","previous_headings":"","what":"Gallery","title":"Helper Functions for Interactive Tree Of Life","text":"collected reproducible plots gallery page.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"news","dir":"","previous_headings":"","what":"News","title":"Helper Functions for Interactive Tree Of Life","text":"update history: Version 1.1.11 Added: Dual-factor coloring support binary dataset visualization. Fixed: Legend order issues DATASET_COLORSTRIP, DATASET_SYMBOL, DATASET_DOMAINS functions. Version 1.1.10 Added: Correcting spelling type parameter. Added: Beautifying loading prompt format. Fixed: Fixing SHOW_VALUE output parameter simplebar unit. Version 1.1.9 Fixed: Meaningless warning simplebar template. Fixed: Clustering error heatmap input contains single column. Added: Support simultaneous tree output Hub. Fixed: Bug using + operation heatmap units. Added: Color sorting algorithm support custom root colors. Added: Two tree construction methods (based string vectors data frame row/column names). Version 1.1.8 Added: Citation information loading itol.toolkit package Added: Color distance calculation gradient color generation Added: Color generation two factors Version 1.1.7 Fixed: Remove dependence Biostrings package make installation easier. Fixed: Debug file_get_dir file_get_name functions without uplevel path. Version 1.1.6 Added: Add search_tree_files function search NEWICK format files directory. Added: Add train_theme function learn themes template files directory. Added: Update dataset5 files. Fixed: Update inbuilt_theme data, corrected legend block COLOR_STRIP template file. Fixed: Fix create_uint function COLOR_STRIP type, makes legend function work COLOR_STRIP template. Version 1.1.5 Added: Support two factor shape color DATASET_DOMAIN Fixed: write_hub error DATASET_LINECHART, node data empty Version 1.1.4 Fixed: write_hub error DATASET_DOMAIN, node data empty Fixed: write_unit error LABLE, file parameter empty Version 1.1.3 Added: Set getwd() default value file parameter write_unit function Added: Added new case file parameter write_unit function: value director, use key value unit@profile$name output file name. Version 1.1.2 Fixed: dependence nchar related Rcpp package R version lower 4.0.0 Version 1.1.1 Added: description Get_Start doc Fixed: DATASET_EXTERNALSHAPE loss field_length error Fixed: DATASET_SYMBOL legend Fixed: simplify key parameter description create_unit function Version 1.1.0 Added: DATASET_STYLE, DATASET_COLORSTRIP, TREE_COLORS range, DATASET_SYMBOL, DATASET_DOMAINS, DATASET_CONNECTION, DATASET_MULTIBAR, DATASET_BINARY, DATASET_TEXT, DATASET_EXTERNALSHAPE, DATASET_PIECHART support full color palette(table2itol wesanderson npg aaas nejm lancet jama jco ucscgb d3 igv locuszoom uchicago simpsons futurama rickandmorty startrek tron gsea material BrBG PiYG PRGn PuOr RdBu RdGy RdYlBu RdYlGn Spectral Accent Dark2 Paired Pastel1 Pastel2 Set1 Set2 Set3 Blues BuGn BuPu GnBu Greens Greys Oranges OrRd PuBu PuBuGn PuRd Purples RdPu Reds YlGn YlGnBu YlOrBr YlOrRd) Added: user level add DATASET_MULTIBAR, DATASET_LINECHART, DATASET_PIECHART, DATASET_ALIGNMENT, DATASET_IMAGE, POPUP_INFO support Added: create_hub supports direct input phylo objects tree parameter, just tree file path Fixed: wesanderson color palette random picking function changed runif sample, fixed problem repeated color matching Version 1.0.5 Added: new S4 method + itol.unit itol.unit. method merge data template method. Version 1.0.4 Added: Add wesanderson palettes range case DATASET_COLORSTRIP type Version 1.0.3 Added: interactive complex_html_text RStudio Addins DATASET_TEXT Version 1.0.2 Fixed: create_unit(type=“DATASET_TEXT”), unable use one character setup color parameter (Unable indentify data column) Fixed: unit type TREE_COLORS node data empty, unable use hub_to_unit (attempt use zero-length variable name) Added: Add wesanderson palettes range case TREE_COLORS type","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"Helper Functions for Interactive Tree Of Life","text":"Please open issue report bugs, propose new functions, ask help.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Helper Functions for Interactive Tree Of Life","text":"MIT License","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/color_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Color distance — color_distance","title":"Color distance — color_distance","text":"calculate distance two color hex rgb format. rgb maxColorValue = 255.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/color_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color distance — color_distance","text":"","code":"color_distance(color_1, color_2)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/color_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color distance — color_distance","text":"color_1 color 1 hex rgb format color_2 color 2 hex rgb format","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/color_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color distance — color_distance","text":"distance number","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/complex_html_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Complex HTML text — complex_html_text","title":"Complex HTML text — complex_html_text","text":"Interactively combine columns HTML styles record workflow reproducible code.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/complex_html_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complex HTML text — complex_html_text","text":"","code":"complex_html_text()"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/complex_html_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complex HTML text — complex_html_text","text":"done, code performing operation emitted cursor position.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character data to 0/1 — convert_01","title":"Convert character data to 0/1 — convert_01","text":"data frame list, convert character numberic data 0/1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character data to 0/1 — convert_01","text":"","code":"convert_01(object)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character data to 0/1 — convert_01","text":"object data frame list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert character data to 0/1 — convert_01","text":"data frame 0/1 values","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01_to_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 0/1 data to connection pairs — convert_01_to_connect","title":"Convert 0/1 data to connection pairs — convert_01_to_connect","text":"two column 1 shared element connection. Convert 0/1 data connection pairs long shape table. 0-connection pairs removed.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01_to_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 0/1 data to connection pairs — convert_01_to_connect","text":"","code":"convert_01_to_connect(object)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01_to_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 0/1 data to connection pairs — convert_01_to_connect","text":"object data frame 0/1 data","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_01_to_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 0/1 data to connection pairs — convert_01_to_connect","text":"data frame source target connection information","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_range_to_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert range to node id — convert_range_to_node","title":"Convert range to node id — convert_range_to_node","text":"Convert data frame range id node id mrca method.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_range_to_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert range to node id — convert_range_to_node","text":"","code":"convert_range_to_node(df, tree)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_range_to_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert range to node id — convert_range_to_node","text":"df data frame type id tree tree file path","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/convert_range_to_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert range to node id — convert_range_to_node","text":"data frame converted id range id","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_get_color.html","id":null,"dir":"Reference","previous_headings":"","what":"correct_get_color — correct_get_color","title":"correct_get_color — correct_get_color","text":"correct_get_color. (Version 0.0.0.9000)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_get_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"correct_get_color — correct_get_color","text":"","code":"correct_get_color(str)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_get_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"correct_get_color — correct_get_color","text":"str taxa string","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_get_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"correct_get_color — correct_get_color","text":"vector colors","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct type parameter — correct_type","title":"Correct type parameter — correct_type","text":"Correct type parameter input string similarity synonym mapping.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct type parameter — correct_type","text":"","code":"correct_type(str)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct type parameter — correct_type","text":"str character string representing type name correct.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct type parameter — correct_type","text":"character string corrected type name.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/correct_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct type parameter — correct_type","text":"","code":"correct_type(\"line\") #> [1] \"DATASET_LINECHART\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/count_to_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate tree based on count matrix — count_to_tree","title":"Calculate tree based on count matrix — count_to_tree","text":"start analysis count matrix sequences alignment, use clustering methods get main tree phylo object class output Newick format file. samples elements group information, use weighted clustering method get clear grouped structure.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/count_to_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate tree based on count matrix — count_to_tree","text":"","code":"count_to_tree(count, group = NULL, weight = 0)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/count_to_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate tree based on count matrix — count_to_tree","text":"count data frame containing numberic values abundance count. group vector character containing group information. length vector count columns number. using unweighted clustring, ignore parameter. weight number specifying weight size group information. case, 1 enough. value 0 1, make weight group information weak. value 1, make weight group information strong.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/count_to_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate tree based on count matrix — count_to_tree","text":"phylo class object containing edge vector integers specifying edge id. length vector double node number edge.length vector numbers specifying edge length tip.label vector character specifying tip label Nnode number specifying number nodes node.label vector character specifying node label. tree calculated count matrix case, node label generated ape::makeNodeLabel function. Recent Common Ancestors(MRCA) node named weighted group information, parameter group null.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Create itol.hub Object — create_hub","title":"Create itol.hub Object — create_hub","text":"create new object itol.hub","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create itol.hub Object — create_hub","text":"","code":"create_hub(   tree,   field_tree = NULL,   seq = NULL,   abundance = NULL,   taxonomy = NULL,   node_data = NULL,   tip_data = NULL )"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create itol.hub Object — create_hub","text":"tree tree file field_tree todo seq todo abundance todo taxonomy todo node_data todo tip_data todo","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create itol.hub Object — create_hub","text":"Returns itol.hub object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create itol.hub Object — create_hub","text":"","code":"TREE <- system.file(\"extdata\", \"tree_of_itol_templates.tree\", package = \"itol.toolkit\") create_hub(tree = TREE) #> An object of class \"itol.hub\" from package itol.toolkit #> Main tree:  23  tips #> Feild tree:  0  trees #> Sequence:  0  datasets #> Abundance:  0  datasets #> Taxonomy:  0  levels #> Node data:  0  datasets #> Tip data:  0  datasets #> Themes:  0"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Create itol.theme Object — create_theme","title":"Create itol.theme Object — create_theme","text":"create new object itol.theme","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create itol.theme Object — create_theme","text":"","code":"create_theme(unit = NULL, file = NULL, tree = NULL, ...)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create itol.theme Object — create_theme","text":"unit unit object file template file tree tree file ... arguments passed subsequent functions.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create itol.theme Object — create_theme","text":"Returns itol.theme object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create itol.unit — create_unit","title":"Create itol.unit — create_unit","text":"Create itol.unit simple input R environment.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create itol.unit — create_unit","text":"","code":"create_unit(   data,   key,   type,   style = \"default\",   subtype = NULL,   color = NULL,   line_type = NULL,   font_type = NULL,   size_factor = NULL,   position = NULL,   background_color = NULL,   rotation = NULL,   method = NULL,   shape = NULL,   fill = NULL,   tree )"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create itol.unit — create_unit","text":"data type == \"COLLAPSE\", vector characters specifying tips node used collapsing used extracting. key character specifying output file name hub object. type character specifying template type used extracting. Following choices possible: \"COLLAPSE\",\"PRUNE\",\"SPACING\",\"TREE_COLORS\", \"DATASET_STYLE\",\"LABELS\",\"DATASET_TEXT\",\"DATASET_COLORSTRIP\", \"DATASET_BINARY\",\"DATASET_GRADIENT\",\"DATASET_HEATMAP\",\"DATASET_SYMBOL\", \"DATASET_EXTERNALSHAPE\",\"DATASET_DOMAINS\",\"DATASET_SIMPLEBAR\", \"DATASET_MULTIBAR\",\"DATASET_BOXPLOT\",\"DATASET_LINECHART\",\"DATASET_PIECHART\", \"DATASET_ALIGNMENT\",\"DATASET_CONNECTION\",\"DATASET_IMAGE\",\"POPUP_INFO. style character specifying specific version template type used extracting. default value \"default\" style types. subtype character specifying subtype type. type \"TREE_COLORS\", following choices possible: \"range\", \"clade\", \"branch\", \"label\", \"label_background\". color character specifying color pattern name. following choices possible: \"table2itol\", \"RColorBrewer\", \"ggsci\". line_type character specifying normal dashed line type used clade branch subtype. font_type character specifying bold, italic, bold-italic font type used label branch subtype. size_factor number specifying line width used clade branch subtype size factor label subtype. position type == \"DATASET_STYLE\", character specifying position: following choices possible: \"node\" \"clade\". type == \"DATASET_TEXT\", number specifying position text tree: -1 = external label; number 0 1 = internal label positioned specified value along node branch (example, position 0 exactly start node branch, position 0.5 middle, position 1 end) background_color used type == \"DATASET_STYLE\" subtype == \"label\". character vector character specifying background color hexadecimal, RGB RGBA notation. rotation used type == \"DATASET_TEXT\". number vector number specifying rotation angle text. method character specifying numbric data summarise method. type == \"DATASET_BINARY\", following choices possible: \"mean\", \"sum\". shape character vector character specifying symbol shape. type == \"DATASET_BINARY\", default 2. type == \"DATASET_SYMBOL\", following choices possible: 1 rectangle, 2 circle, 3 star, 4 left pointing triangle, 5 right pointing triangle. using NULL data column, functions automaticly help users setup shapes based levels data. fill type == \"DATASET_SYMBOL\", 1/0 specifying shape outlier filled . type == \"DATASET_DOMAINS\", following choices possible: \"RE|HH|HV|EL|DI|TR|TL|PL|PR|PU|PD|OC|GP\". tree character specifying Newick format tree file path phylo object main phylogenetic tree.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create itol.unit — create_unit","text":"itol.unit object containing type group holds information template type data . critical piece information. many functions itol.toolkit package, template type information used determine different data processing input/output methods. sep group holds data separator information . one important parameters data reading output. separate category frequently used input parameter subsequent parameters read. profile group contains basic information dataset, dataset name color label distinguish dataset. dataset name extremely important. parameter used almost throughout data processing itol.toolkit package. content parameter key value, data theme information dataset associated. turn, high throughput learning writing large-scale data can achieved. parameter included template types particularly simple structure, choose file name user-defined method key value. field group contains information sample within dataset, type parameter exists multi-sample data. information even includes clustering tree samples. information usually stored part column names metadata part abundance information itol.hub object. common_themes themes used high frequency different templates. parameters small number constitute common features iTOL visual style settings, legend, margin, etc. specific_themes themes used specific templates. number parameters large. However, used one template control style details visualization. unifying parameters calling according template type, users can perform secondary development data processing high degree parameter aggregation without worrying much differences different template types. data slot contains list two data frames nodes tips data separately. first column two data frames node tip id. input data contains range id, converted node id convert_range_to_node function automatically.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/create_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create itol.unit — create_unit","text":"","code":"tree <- system.file(\"extdata\",\"tree_of_itol_templates.tree\",package = \"itol.toolkit\") data(\"template_groups\") data(\"template_parameters_count\") # COLLAPSE group_names <- unique(template_groups$group) object <- create_hub(tree = tree) unit <- create_unit(data = group_names, key = \"E001_collapse_1\", type = \"COLLAPSE\", tree = tree) object <- learn_data_from_unit(object,unit) # PRUNE select_note = c(\"theme_style\",\"basic_plot\") unit <- create_unit(data = select_note, key = \"E002_prune_1\", type = \"PRUNE\", tree = tree) object <- learn_data_from_unit(object,unit) # SPACING df_values = data.frame(id = row.names(template_parameters_count), values = rowSums(template_parameters_count)) unit <- create_unit(data = df_values, key = \"E005_spacing_1\", type = \"SPACING\", tree = tree) object <- learn_data_from_unit(object,unit) # TREE_COLORS ## range unit <- create_unit(data = template_groups, key = \"E006_tree_colors_1\", type = \"TREE_COLORS\", subtype = \"range\", tree = tree) #> Using the first column as id: template #> Error in summarise_all(., n_distinct): could not find function \"summarise_all\" object <- learn_data_from_unit(object,unit)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two data frame — df_merge","title":"Merge two data frame — df_merge","text":"merge sub data frame initial data frame","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two data frame — df_merge","text":"","code":"df_merge(df1, df2, by = \"id\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two data frame — df_merge","text":"df1 initial data frame df2 sub data frame key column","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two data frame — df_merge","text":"data frame containing merged information","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame tree — df_tree","title":"Data frame tree — df_tree","text":"build tree row column names data frame.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame tree — df_tree","text":"","code":"df_tree(df, main = \"col\", order = \"none\", sep = \"_\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/df_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame tree — df_tree","text":"df input data frame main col(default) row order none value sep default '_'","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/dt_transpose_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose a data.table using the first column as new header — dt_transpose_header","title":"Transpose a data.table using the first column as new header — dt_transpose_header","text":"Transpose data.table first column's values become new column names, original column names (excluding first) become new 'Sample' column.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/dt_transpose_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose a data.table using the first column as new header — dt_transpose_header","text":"","code":"dt_transpose_header(dt)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/dt_transpose_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose a data.table using the first column as new header — dt_transpose_header","text":"dt data.table transpose. first column contains new column names.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/dt_transpose_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose a data.table using the first column as new header — dt_transpose_header","text":"transposed data.table updated column names 'Sample' column.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read fasta file — fa_read","title":"Read fasta file — fa_read","text":"Read fasta format sequences file data.frame","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read fasta file — fa_read","text":"","code":"fa_read(file)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read fasta file — fa_read","text":"file input file fasta format","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read fasta file — fa_read","text":"data frame sequence id sequence","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write fasta file — fa_write","title":"Write fasta file — fa_write","text":"Write fasta format sequences file data.frame. (Version 0.0.0.9000)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write fasta file — fa_write","text":"","code":"fa_write(object, file, id = \"seq_name\", seq = \"sequence\", append = FALSE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write fasta file — fa_write","text":"object data.frame format data file input file fasta format id id col seq seq col append append end already existing file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/fa_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write fasta file — fa_write","text":"return value, output fasta file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file dir — file_get_dir","title":"Get file dir — file_get_dir","text":"Get file dir string","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file dir — file_get_dir","text":"","code":"file_get_dir(str, up = FALSE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file dir — file_get_dir","text":"str str dir","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file dir — file_get_dir","text":"character specifying dir path","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file name — file_get_name","title":"Get file name — file_get_name","text":"Get file name string","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file name — file_get_name","text":"","code":"file_get_name(str, with_ext = TRUE, keep_dir = FALSE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file name — file_get_name","text":"str str with_ext ext keep_dir keep file dir ","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_get_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file name — file_get_name","text":"character specifying file name","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_to_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create itol.unit Object from file — file_to_unit","title":"Create itol.unit Object from file — file_to_unit","text":"create new object itol.unit","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_to_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create itol.unit Object from file — file_to_unit","text":"","code":"file_to_unit(file, tree, ...)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_to_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create itol.unit Object from file — file_to_unit","text":"file template file tree tree file ... arguments passed subsequent functions.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/file_to_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create itol.unit Object from file — file_to_unit","text":"Returns itol.unit object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/get_color.html","id":null,"dir":"Reference","previous_headings":"","what":"get_color — get_color","title":"get_color — get_color","text":"get color, support max length 40","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/get_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_color — get_color","text":"","code":"get_color(n = 0, set = \"table2itol\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/get_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_color — get_color","text":"n level length vector set character specifying palette set name. dedault, table2itol setted. following choices possible: wsanderson.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/get_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_color — get_color","text":"vector colors","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/gradient_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate gradient colors — gradient_color","title":"Generate gradient colors — gradient_color","text":"generate vector gradient colors start, mid, end colors.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/gradient_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate gradient colors — gradient_color","text":"","code":"gradient_color(n, start, mid = NULL, end = \"#FFFFFF\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/gradient_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate gradient colors — gradient_color","text":"n length vector start start color hex format mid mid color hex format, default null. end end color hex format, default white.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/gradient_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate gradient colors — gradient_color","text":"vector gradient colors","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/head_line.html","id":null,"dir":"Reference","previous_headings":"","what":"head line — head_line","title":"head line — head_line","text":"Head line templates","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/head_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"head line — head_line","text":"","code":"head_line(function_name)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/head_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"head line — head_line","text":"function_name parent function name","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/head_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"head line — head_line","text":"character specifying template type","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/hub_to_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create itol.unit Object from object — hub_to_unit","title":"Create itol.unit Object from object — hub_to_unit","text":"create new object itol.unit","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/hub_to_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create itol.unit Object from object — hub_to_unit","text":"","code":"hub_to_unit(object, theme, key)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/hub_to_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create itol.unit Object from object — hub_to_unit","text":"object itol.hub object theme itol.theme object key key id dataset name","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/hub_to_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create itol.unit Object from object — hub_to_unit","text":"Returns itol.unit object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/inbuilt_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"inbuilt themes — inbuilt_themes","title":"inbuilt themes — inbuilt_themes","text":"Default themes learned iTOL offical template examples.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/inbuilt_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inbuilt themes — inbuilt_themes","text":"","code":"inbuilt_themes"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/inbuilt_themes.html","id":"inbuilt-themes","dir":"Reference","previous_headings":"","what":"inbuilt_themes","title":"inbuilt themes — inbuilt_themes","text":"list 23 template themes: COLLAPSE Default theme collapse template PRUNE Default theme prune template SPACING Default theme spacing template TREE_COLORS Default theme tree colors template DATASET_STYLE Default theme style template LABELS Default theme labels template DATASET_TEXT Default theme text template DATASET_COLORSTRIP Default theme colorstrip template DATASET_BINARY Default theme binary template DATASET_GRADIENT Default theme gradient template DATASET_HEATMAP Default theme heatmap template DATASET_SYMBOL Default theme symbol template DATASET_EXTERNALSHAPE Default theme externalshape template DATASET_DOMAINS Default theme domains template DATASET_SIMPLEBAR Default theme simple bar template DATASET_MULTIBAR Default theme multi bar template DATASET_BOXPLOT Default theme box plot template DATASET_LINECHART Default theme line chart template DATASET_PIECHART Default theme pie chart template DATASET_ALIGNMENT Default theme alignment template DATASET_CONNECTION Default theme connection template DATASET_IMAGE Default theme image template POPUP_INFO Default theme popup info template","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.hub-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The itol.hub Class — itol.hub-class","title":"The itol.hub Class — itol.hub-class","text":"itol.hub object intermediate storage container used internally throughout integration procedure hold bits data useful downstream.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.hub-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The itol.hub Class — itol.hub-class","text":"tree list meta data table, usually raw, full, analyze seq identity active assay abundance abundance taxonomy taxonomy meta.data meta.data theme itol theme","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.theme-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The itol.theme Class — itol.theme-class","title":"The itol.theme Class — itol.theme-class","text":"itol.theme object intermediate storage container used internally throughout integration procedure hold bits data useful downstream.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.theme-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The itol.theme Class — itol.theme-class","text":"type list meta data table, usually raw, full, analyze sep identity active assay profile abundance field taxonomy common_themes meta.data specific_themes itol theme","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.unit-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The itol.unit Class — itol.unit-class","title":"The itol.unit Class — itol.unit-class","text":"itol.unit object intermediate storage container used internally throughout integration procedure hold bits data useful downstream.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/itol.unit-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The itol.unit Class — itol.unit-class","text":"type list meta data table, usually raw, full, analyze sep identity active assay profile abundance field taxonomy common_themes meta.data specific_themes itol theme data data","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn data from template file — learn_data","title":"Learn data from template file — learn_data","text":"Learn data template file data frame","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn data from template file — learn_data","text":"","code":"learn_data(df1 = NULL, file, tree = NULL, ...)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn data from template file — learn_data","text":"df1 initial data frame file template file tree tree file ... arguments passed subsequent functions.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn data from template file — learn_data","text":"list two data frame node tip annotation data","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn object data from file — learn_data_from_file","title":"Learn object data from file — learn_data_from_file","text":"Learn itol.hub object data template file.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn object data from file — learn_data_from_file","text":"","code":"learn_data_from_file(object, file)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn object data from file — learn_data_from_file","text":"object itol.hub object file template file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn object data from file — learn_data_from_file","text":"itol.hub object new data template file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn object data from files — learn_data_from_files","title":"Learn object data from files — learn_data_from_files","text":"Learn itol.hub object data template file.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn object data from files — learn_data_from_files","text":"","code":"learn_data_from_files(object, files = NULL, dir = NULL, pattern = \".\", ...)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn object data from files — learn_data_from_files","text":"object itol.hub object files template files path dir files path pattern file name pattern regex ... arguments passed subsequent functions.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn object data from files — learn_data_from_files","text":"itol.hub object new data template files","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn object data from unit — learn_data_from_unit","title":"Learn object data from unit — learn_data_from_unit","text":"Learn itol.hub object data unit object.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn object data from unit — learn_data_from_unit","text":"","code":"learn_data_from_unit(object, unit)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn object data from unit — learn_data_from_unit","text":"object itol.hub object unit itol.unit object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn object data from unit — learn_data_from_unit","text":"itol.hub object containing new data itol.unit object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn object data from units — learn_data_from_unit_list","title":"Learn object data from units — learn_data_from_unit_list","text":"Learn itol.hub object data list unit object.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn object data from units — learn_data_from_unit_list","text":"","code":"learn_data_from_unit_list(object, units)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn object data from units — learn_data_from_unit_list","text":"object itol.hub object units itol.unit object list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_data_from_unit_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn object data from units — learn_data_from_unit_list","text":"itol.hub object new data list itol.unit objects","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn from tree — learn_df","title":"Learn from tree — learn_df","text":"Learn initial data frame Newick format tree leaves.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn from tree — learn_df","text":"","code":"learn_df(tree, node = FALSE, tip = TRUE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn from tree — learn_df","text":"tree Newick tree file phylo object. node logical control output node label . default value FALSE. tip logical control output tip label .default value TRUE.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn from tree — learn_df","text":"list containing node data frame id column. id information node label Newick format tree file phylo object. node parameter set FALSE, node information NULL. tip data frame id column. id information tip label Newick format tree file phylo object. tip parameter set FALSE, tip information NULL.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn from tree — learn_df","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") sub_df <- learn_df(tree,node=TRUE,tip=TRUE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn field — learn_field","title":"Learn field — learn_field","text":"learn field paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn field — learn_field","text":"","code":"learn_field(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn field — learn_field","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn field — learn_field","text":"list field parameters containing labels vector characters specifying filed name. DATASET_HEATMAP, labels shown heatamp column names. colors define colors individual field column (use hexadecimal, RGB RGBA notation; using RGB/RGBA, COMMA used SEPARATOR) shapes Shape number 1 6, protein domain shape definition. 1-square, 2-circle, 3-star, 4-right pointing triangle, 5-left pointing triangle, 6-checkmark","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn field — learn_field","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) ## create unit unit <- create_unit(data = df_frequence,                     key = \"Quickstart\",                     type = \"DATASET_HEATMAP\",                     tree = tree) #> Using the first column as id: templates ## write unit file <- tempfile() write_unit(unit,file) ## Learn legend parameters lines <- line_clean(file=file) sep = learn_separator(file = file) learn_field(lines = lines, sep = sep) #> $labels #>  [1] \"10.1016/j.jhazmat.2022.129230\"  \"10.1016j.envpol.2022.120243\"    #>  [3] \"10.1128/mSystems.00258-21\"      \"10.1038/s41467-022-31113-w\"     #>  [5] \"10.1128/mSystems.00093-19\"      \"10.3390/pathogens11091022\"      #>  [7] \"10.1038/s41467-022-33238-4\"     \"10.1099/mgen.0.000839\"          #>  [9] \"10.1038/s41467-019-10191\"       \"10.1038/s41598-018-25545-y\"     #> [11] \"10.1016/j.cub.2021.01.001\"      \"10.3389/fpls.2021.693039\"       #> [13] \"10.1128/spectrum.02211-22\"      \"10.1371/journal.pgen.1010097\"   #> [15] \"10.1371/journal.pgen.1010112\"   \"10.1101/2022.06.22.497255\"      #> [17] \"10.1186/s40168-021-01016-x\"     \"10.1101/2022.12.08.519582\"      #> [19] \"10.1016/j.foodcont.2021.108572\" \"10.1016/j.foodres.2022.111998\"  #> [21] \"10.1038/s41467-022-35452-6\"     #>  #> $colors #> NULL #>  #> $shapes #> NULL #>"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn legend — learn_legend","title":"Learn legend — learn_legend","text":"learn legend paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn legend — learn_legend","text":"","code":"learn_legend(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn legend — learn_legend","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn legend — learn_legend","text":"list legned parameters containing title character specifying title legend. character separater within. position_x number specifying x axis px value legend. position_y number specifying y axis px value legend. horizontal order legend entries horizontally instead vertically, set parameter 1 shapes Shape number 1 6, protein domain shape definition. 1-square, 2-circle, 3-star, 4-right pointing triangle, 5-left pointing triangle, 6-checkmark colors define colors legend element (use hexadecimal, RGB RGBA notation; using RGB/RGBA, COMMA used SEPARATOR) labels legend element label.character separater within. shape_scales shape, can define scaling factor 0 1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn legend — learn_legend","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) ## create unit unit <- create_unit(data = df_frequence,                     key = \"Quickstart\",                     type = \"DATASET_SIMPLEBAR\",                     method = \"mean\",                     tree = tree) #> Using the first column as id: templates #> The input data are mutate as one column by method: mean ## write unit file <- tempfile() write_unit(unit,file) ## Learn legend parameters lines <- line_clean(file=file) sep = learn_separator(file = file) learn_legend(lines = lines, sep = sep) #> $title #> [1] \"Example legend title\" #>  #> $position_x #> NULL #>  #> $position_y #> NULL #>  #> $horizontal #> NULL #>  #> $shapes #> [1] \"1\" \"1\" \"2\" \"2\" #>  #> $colors #> [1] \"#ff0000\" \"#00ff00\" \"#00ffff\" \"#0000ff\" #>  #> $labels #> [1] \"value1\" \"value2\" \"value3\" \"value4\" #>  #> $shape_scales #> NULL #>"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn paramter — learn_line","title":"Learn paramter — learn_line","text":"learn paramter name values based key name front line.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn paramter — learn_line","text":"","code":"learn_line(lines, param, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn paramter — learn_line","text":"lines vector character strings template file. param charactor string paramter key name. key name uppercase letters '_' without spacing. sep charactor specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn paramter — learn_line","text":"charactor string containing parameter value.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn paramter — learn_line","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit <- create_unit(data = df_group,                     key = \"Quickstart\",                     type = \"DATASET_COLORSTRIP\",                     tree = tree) #> Using default color pattern: table2itol ## write unit file <- tempfile() write_unit(unit,file) ## Learn parameter lines <- line_clean(file=file) sep = learn_separator(file = file) learn_line(lines = lines, param = \"STRIP_WIDTH\", sep = sep) #> [1] \"25\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn profile — learn_profile","title":"Learn profile — learn_profile","text":"learn profile paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn profile — learn_profile","text":"","code":"learn_profile(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn profile — learn_profile","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn profile — learn_profile","text":"list profile parameters containing name character specifying label, used legend table color dataset color legend (use hexadecimal, RGB RGBA notation; using RGB/RGBA, COMMA used SEPARATOR)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn profile — learn_profile","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") df_frequence <- data.table::fread(system.file(\"extdata\",                                               \"templates_frequence.txt\",                                               package = \"itol.toolkit\")) ## create unit unit <- create_unit(data = df_frequence,                     key = \"Quickstart\",                     type = \"DATASET_HEATMAP\",                     tree = tree) #> Using the first column as id: templates ## write unit file <- tempfile() write_unit(unit,file) ## Learn legend parameters lines <- line_clean(file=file) sep = learn_separator(file = file) learn_profile(lines = lines, sep = sep) #> $name #> [1] \"Quickstart\" #>  #> $color #> [1] \"#ff0000\" #>"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn separator — learn_separator","title":"Learn separator — learn_separator","text":"Learn 3 types separators: tab, space, comma.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn separator — learn_separator","text":"","code":"learn_separator(lines = NULL, file = NULL)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn separator — learn_separator","text":"lines vector character strings template file. file parameter NULL, parameter set. file character specifying template file path. parameter setted, lines parameter replaced.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn separator — learn_separator","text":"character specifying separator","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_separator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn separator — learn_separator","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit <- create_unit(data = df_group,                     key = \"Quickstart\",                     type = \"DATASET_COLORSTRIP\",                     tree = tree) #> Using default color pattern: table2itol ## write unit file <- tempfile() write_unit(unit,file) ## Learn template type learn_separator(file = file) #> [1] \"\\t\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_subdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn sub data frame — learn_subdf","title":"Learn sub data frame — learn_subdf","text":"Learn sub data frame template file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_subdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn sub data frame — learn_subdf","text":"","code":"learn_subdf(lines, type, sep, dataset_name = NULL, field_labels = NULL)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_subdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn sub data frame — learn_subdf","text":"lines vector character strings template file. type template type sep character specifying separator. dataset_name label template file field_labels sample ids binary, heatmap, multi-column value templates","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_subdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn sub data frame — learn_subdf","text":"data frame containing data learned template file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn align — learn_theme_align","title":"Learn align — learn_theme_align","text":"learn connection paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn align — learn_theme_align","text":"","code":"learn_theme_align(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn align — learn_theme_align","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn align — learn_theme_align","text":"list align parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn alignment — learn_theme_alignment","title":"Learn alignment — learn_theme_alignment","text":"learn alignment paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn alignment — learn_theme_alignment","text":"","code":"learn_theme_alignment(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn alignment — learn_theme_alignment","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn alignment — learn_theme_alignment","text":"list alignment parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn bar — learn_theme_bar","title":"Learn bar — learn_theme_bar","text":"learn bar paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn bar — learn_theme_bar","text":"","code":"learn_theme_bar(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn bar — learn_theme_bar","text":"lines file lines sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn bar — learn_theme_bar","text":"list bar parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn basic plot — learn_theme_basic_plot","title":"Learn basic plot — learn_theme_basic_plot","text":"learn basic plot paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn basic plot — learn_theme_basic_plot","text":"","code":"learn_theme_basic_plot(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn basic plot — learn_theme_basic_plot","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn basic plot — learn_theme_basic_plot","text":"list basic plot parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn basic theme — learn_theme_basic_theme","title":"Learn basic theme — learn_theme_basic_theme","text":"learn basic theme paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn basic theme — learn_theme_basic_theme","text":"","code":"learn_theme_basic_theme(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn basic theme — learn_theme_basic_theme","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_basic_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn basic theme — learn_theme_basic_theme","text":"list basic theme parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn binary — learn_theme_binary","title":"Learn binary — learn_theme_binary","text":"learn binary paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn binary — learn_theme_binary","text":"","code":"learn_theme_binary(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn binary — learn_theme_binary","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn binary — learn_theme_binary","text":"list binary chart parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_border.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn border — learn_theme_border","title":"Learn border — learn_theme_border","text":"learn border paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_border.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn border — learn_theme_border","text":"","code":"learn_theme_border(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_border.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn border — learn_theme_border","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_border.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn border — learn_theme_border","text":"list border parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_common_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn common themes — learn_theme_common_themes","title":"Learn common themes — learn_theme_common_themes","text":"learn common theme paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_common_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn common themes — learn_theme_common_themes","text":"","code":"learn_theme_common_themes(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_common_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn common themes — learn_theme_common_themes","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_common_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn common themes — learn_theme_common_themes","text":"list common theme parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn connection — learn_theme_connection","title":"Learn connection — learn_theme_connection","text":"learn connection paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn connection — learn_theme_connection","text":"","code":"learn_theme_connection(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn connection — learn_theme_connection","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn connection — learn_theme_connection","text":"list connection parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn domain — learn_theme_domain","title":"Learn domain — learn_theme_domain","text":"learn domain paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn domain — learn_theme_domain","text":"","code":"learn_theme_domain(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn domain — learn_theme_domain","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn domain — learn_theme_domain","text":"list domain parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_externalshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn externalshape — learn_theme_externalshape","title":"Learn externalshape — learn_theme_externalshape","text":"learn connection paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_externalshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn externalshape — learn_theme_externalshape","text":"","code":"learn_theme_externalshape(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_externalshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn externalshape — learn_theme_externalshape","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_externalshape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn externalshape — learn_theme_externalshape","text":"list external shape parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn heatmap — learn_theme_heatmap","title":"Learn heatmap — learn_theme_heatmap","text":"learn heatmap paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn heatmap — learn_theme_heatmap","text":"","code":"learn_theme_heatmap(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn heatmap — learn_theme_heatmap","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn heatmap — learn_theme_heatmap","text":"list heatmap parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn image — learn_theme_image","title":"Learn image — learn_theme_image","text":"learn connection paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn image — learn_theme_image","text":"","code":"learn_theme_image(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn image — learn_theme_image","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn image — learn_theme_image","text":"list image parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn label — learn_theme_label","title":"Learn label — learn_theme_label","text":"learn label paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn label — learn_theme_label","text":"","code":"learn_theme_label(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn label — learn_theme_label","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn label — learn_theme_label","text":"list label parameters containing display 1/0 specifying display hide text labels field column size number specifying size factor text labels top 1/0 specifying labels position. 0, label text fit shape hidden 1/0 specifying labels position. default, internal labels placed branches. 1, labels branches rotation number specifying text label rotation angle straight 1/0 specifying tree rotation. set 1, tree rotation influence individual label rotation vertical number specifying label vertical shift. Shift internal labels vertically amount pixels (positive negative) shift number specifying label shift. text label shift pixels (positive negative) external_shift 1/0 specifying label external shift add extra horizontal shift external labels. Useful unrooted display mode shift text labels away node labels.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn label — learn_theme_label","text":"","code":"library(dplyr) #> Warning: package ‘dplyr’ was built under R version 4.2.3 #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union   tree <- system.file(\"extdata\",                       \"tree_of_itol_templates.tree\",                       package = \"itol.toolkit\")   tab_tmp <- data.table::fread(system.file(\"extdata\",                                            \"parameter_groups.txt\",                                            package = \"itol.toolkit\"))   tab_id_group <- tab_tmp[,c(1,2)]   tab_tmp <- tab_tmp[,-c(1,2)]   tab_tmp_01 <- convert_01(object = tab_tmp)   tab_tmp_01 <- cbind(tab_id_group,tab_tmp_01)   order <- c(\"type\",\"separator\",\"profile\",\"field\",\"common themes\",     \"specific themes\",\"data\")   tab_tmp_01_long <- tab_tmp_01 %>%                        tidyr::gather(key = \"variable\",                                      value = \"value\",                                      c(-parameter,-group))   template_start_group <- tab_tmp_01_long %>%                             group_by(group,variable) %>%                             summarise(sublen = sum(value)) %>%                             tidyr::spread(key=variable,                                           value=sublen) #> `summarise()` has grouped output by 'group'. You can override using the #> `.groups` argument.   template_start_group$group <- factor(template_start_group$group,                                        levels = order)   template_start_group <- template_start_group %>% arrange(group)   start_group <- data.frame(Var1 = template_start_group$group,                             Freq = apply(template_start_group[,-1], 1, max))   start_group$start <- 0   for (i in 2:nrow(start_group)) {     start_group$start[i] <- sum(start_group$Freq[1:(i-1)])   }   template_start_group[template_start_group == 0] <- NA   template_end_group <- template_start_group[,2:(ncol(template_start_group)-1)] + start_group$start   template_end_group <- data.frame(group = order,template_end_group)   template_end_group_long <- template_end_group %>%                                tidyr::gather(key = \"variable\",                                              value = \"value\",                                              -group)   names(template_end_group_long)[3] <- \"end\"   template_end_group_long$start <- rep(start_group$start,                                        length(unique(template_end_group_long$variable)))   template_end_group_long <- template_end_group_long %>% na.omit()   template_end_group_long$length <- sum(start_group$Freq)   template_end_group_long <- template_end_group_long[,c(2,5,4,3,1)]   template_end_group_long$group <- factor(template_end_group_long$group,levels = order)   unit <- create_unit(data = template_end_group_long,                       key = \"Quickstart\",                       type = \"DATASET_DOMAINS\",                       tree = tree) #> Using the first column as id: variable #> Using following column as length parameter: length #> Using following column as start parameter: start #> Using following column as end parameter: end #> Identifying data column to auto setup color parameter #> Using default color pattern: table2itol #> Identifying data column to auto setup shape parameter   file <- tempfile()   write_unit(unit,file)   lines <- line_clean(file=file)   sep = learn_separator(file = file)   learn_theme_label(lines,sep) #> $display #> NULL #>  #> $size #> NULL #>  #> $top #> [1] \"0\" #>  #> $below #> NULL #>  #> $rotation #> NULL #>  #> $straight #> NULL #>  #> $vertical #> NULL #>  #> $shift #> NULL #>  #> $external_shift #> NULL #>"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_linechart.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn linechart — learn_theme_linechart","title":"Learn linechart — learn_theme_linechart","text":"learn linechart paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_linechart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn linechart — learn_theme_linechart","text":"","code":"learn_theme_linechart(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_linechart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn linechart — learn_theme_linechart","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_linechart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn linechart — learn_theme_linechart","text":"list line chart parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_piechart.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn piechart — learn_theme_piechart","title":"Learn piechart — learn_theme_piechart","text":"learn piechart paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_piechart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn piechart — learn_theme_piechart","text":"","code":"learn_theme_piechart(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_piechart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn piechart — learn_theme_piechart","text":"lines vector character strings template file. sep character specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_piechart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn piechart — learn_theme_piechart","text":"list pie chart parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_specific_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn specific themes — learn_theme_specific_themes","title":"Learn specific themes — learn_theme_specific_themes","text":"learn specific theme paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_specific_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn specific themes — learn_theme_specific_themes","text":"","code":"learn_theme_specific_themes(lines, sep, type)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_specific_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn specific themes — learn_theme_specific_themes","text":"lines vector character strings template file. sep character specifying separator. type template type","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_specific_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn specific themes — learn_theme_specific_themes","text":"list specific theme parameters containing","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_strip_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn strip label — learn_theme_strip_label","title":"Learn strip label — learn_theme_strip_label","text":"learn strip label paramters list","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_strip_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn strip label — learn_theme_strip_label","text":"","code":"learn_theme_strip_label(lines, sep)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_strip_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn strip label — learn_theme_strip_label","text":"lines vector character strings template file. sep charactor specifying separator.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_strip_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn strip label — learn_theme_strip_label","text":"list strip label parameters containing display 0/1 specifying display hide individual label inside colored strip (defined data ) width number specifying width colored strip size number specifying strip label size factor (relative tree leaf labels) color define colors strip label element (use hexadecimal, RGB RGBA notation; using RGB/RGBA, COMMA used SEPARATOR) color_branches 1/0 specifying branches tree colored according colors strips leaves. children node color, colored , ie. color propagate inwards towards root. position character specifying position strip label within box; 'top', 'center' 'bottom' shift number specifying strip label shift pixels (positive negative) rotation number specifying rotation strip labels; used rectangular tree display mode outline_width number specifying draw black outline around text (width pixels)","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_theme_strip_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn strip label — learn_theme_strip_label","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit <- create_unit(data = df_group,                     key = \"Quickstart\",                     type = \"DATASET_COLORSTRIP\",                     tree = tree) #> Using default color pattern: table2itol ## write unit file <- tempfile() write_unit(unit,file) ## Learn parameter lines <- line_clean(file=file) sep = learn_separator(file = file) learn_theme_strip_label(lines = lines, sep = sep) #> $display #> NULL #>  #> $width #> [1] \"25\" #>  #> $size #> NULL #>  #> $color #> NULL #>  #> $color_branches #> [1] \"1\" #>  #> $position #> NULL #>  #> $shift #> NULL #>  #> $rotation #> NULL #>  #> $outline_width #> NULL #>"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Learn template type — learn_type","title":"Learn template type — learn_type","text":"Extract first line template learn type information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learn template type — learn_type","text":"","code":"learn_type(file)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learn template type — learn_type","text":"file template file. template files follow format rules iTOL offical template files. files start following headers: \"COLLAPSE\", \"PRUNE\", \"SPACING\", \"TREE_COLORS\", \"DATASET_STYLE\", \"LABELS\", \"DATASET_TEXT\", \"DATASET_COLORSTRIP\", \"DATASET_BINARY\", \"DATASET_GRADIENT\", \"DATASET_HEATMAP\", \"DATASET_SYMBOL\", \"DATASET_EXTERNALSHAPE\", \"DATASET_DOMAINS\", \"DATASET_SIMPLEBAR\", \"DATASET_MULTIBAR\", \"DATASET_BOXPLOT\", \"DATASET_LINECHART\", \"DATASET_PIECHART\", \"DATASET_ALIGNMENT\", \"DATASET_CONNECTION\", \"DATASET_IMAGE\", \"POPUP_INFO\".","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learn template type — learn_type","text":"character specifying header information","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/learn_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learn template type — learn_type","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit <- create_unit(data = df_group,                     key = \"Quickstart\",                     type = \"DATASET_COLORSTRIP\",                     tree = tree) #> Using default color pattern: table2itol ## write unit file <- tempfile() write_unit(unit,file) ## Learn template type learn_type(file) #> [1] \"DATASET_COLORSTRIP\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out comments and empty lines — line_clean","title":"Filter out comments and empty lines — line_clean","text":"Remove lines start # without information.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out comments and empty lines — line_clean","text":"","code":"line_clean(lines = NULL, file = NULL)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out comments and empty lines — line_clean","text":"lines vector character strings. strings containing lines template file. file parameter NULL, parameter set. file character specifying template file path. parameter setted, lines parameter replaced.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out comments and empty lines — line_clean","text":"vector character strings","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out comments and empty lines — line_clean","text":"","code":"strs <- c(\"#comment\",\"DATA\") line_clean(lines=strs) #> [1] \"DATA\""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split lines into two parts — line_split","title":"Split lines into two parts — line_split","text":"Split lines based data block marker","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split lines into two parts — line_split","text":"","code":"line_split(lines, param = \"data\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split lines into two parts — line_split","text":"lines vector character strings template file. param \"theme\" \"data\" theme paramters data lines","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/line_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split lines into two parts — line_split","text":"vector character strings containing data theme information","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/longest_continuous_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate longest continuous match between input and target strings — longest_continuous_match","title":"Calculate longest continuous match between input and target strings — longest_continuous_match","text":"function calculates longest continuous matching substring input string target string.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/longest_continuous_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate longest continuous match between input and target strings — longest_continuous_match","text":"","code":"longest_continuous_match(input_str, target_str)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/longest_continuous_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate longest continuous match between input and target strings — longest_continuous_match","text":"input_str character string match target string. target_str character string compare input string.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/longest_continuous_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate longest continuous match between input and target strings — longest_continuous_match","text":"integer value representing longest continuous match.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/merge_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge units — merge_unit","title":"Merge units — merge_unit","text":"Merge two itol.unit type. second unit data added first one.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/merge_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge units — merge_unit","text":"","code":"merge_unit(obj1, obj2)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/merge_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge units — merge_unit","text":"obj1 itol.unit object specifying first unit obj2 itol.unit object specifying second unit","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/merge_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge units — merge_unit","text":"itol.unit object merged data","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/plus-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"plus method add method for S4 class itol.hub and itol.unit — +,itol.hub,itol.unit-method","title":"plus method add method for S4 class itol.hub and itol.unit — +,itol.hub,itol.unit-method","text":"plus method add method S4 class itol.hub itol.unit plus method add method S4 class itol.unit itol.unit","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/plus-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plus method add method for S4 class itol.hub and itol.unit — +,itol.hub,itol.unit-method","text":"","code":"# S4 method for class 'itol.hub,itol.unit' e1 + e2  # S4 method for class 'itol.unit,itol.unit' e1 + e2"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/plus-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plus method add method for S4 class itol.hub and itol.unit — +,itol.hub,itol.unit-method","text":"e1 object class itol.unit e2 object class itol.unit","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/plus-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plus method add method for S4 class itol.hub and itol.unit — +,itol.hub,itol.unit-method","text":"itol.hub object new data itol.unit object itol.unit object merged data","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/search_tree_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Search tree file — search_tree_file","title":"Search tree file — search_tree_file","text":"Search Newick format tree file dir","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/search_tree_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search tree file — search_tree_file","text":"","code":"search_tree_file(   dir = getwd(),   n = \"first\",   method = \"mtime\",   max_size = 10240 )"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/search_tree_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search tree file — search_tree_file","text":"dir path tree file template files n 'first', 'last', '' method sort 'mtime', 'ctime', 'atime', 'character' max_size limit file size accelerate searching","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/search_tree_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search tree file — search_tree_file","text":"vector characters specifying file name","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/show-itol.hub-method.html","id":null,"dir":"Reference","previous_headings":"","what":"show method for S4 class itol.hub — show,itol.hub-method","title":"show method for S4 class itol.hub — show,itol.hub-method","text":"show method S4 class itol.hub","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/show-itol.hub-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show method for S4 class itol.hub — show,itol.hub-method","text":"","code":"# S4 method for class 'itol.hub' show(object)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/show-itol.hub-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show method for S4 class itol.hub — show,itol.hub-method","text":"object object class itol.hub","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/show-itol.hub-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"show method for S4 class itol.hub — show,itol.hub-method","text":"stdout screen information itol.hub object","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/sort_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort colors — sort_color","title":"Sort colors — sort_color","text":"sort colors similarity","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/sort_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort colors — sort_color","text":"","code":"sort_color(colors, root = NULL, rev = FALSE, plot = FALSE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/sort_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort colors — sort_color","text":"colors vector colors hex format root sort root color rev sort order similarity(default) difference plot preview color order","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/sort_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort colors — sort_color","text":"vector sorted colors","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"template groups — template_groups","title":"template groups — template_groups","text":"Templates clustered 5 groups parameter similarity.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"template groups — template_groups","text":"","code":"template_groups"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_groups.html","id":"template-groups","dir":"Reference","previous_headings":"","what":"template_groups","title":"template groups — template_groups","text":"data frame template group clustering reslut: template 23 template types iTOL group 5 clustring gourps: Tree structure: group controls topology tree branch merging, filtering, spacing. style rich annotation data, even though annotation data include single-column id information contain dataset base information, sample information, common specific style information. particularly simple type template. Theme style: change topology add text information changes color scheme, line type width, font style size existing information. extremely comprehensive diverse type annotation information. Text: group contains templates added text information. super flexible convenient annotation methods, users can modify even single character's style HTML. Users can also modify text annotation style nodes branches batch based matching conditions itol.hub objects, require regular expression replacement precise data filtering. high-frequency data processing difficult achieve retain workflow EXCEL-based editor. Basic plot: group contains basic visualization methods. functional point view, feature-rich class templates. similarity parameters within part high.structured uniform organization templates can greatly reduce code redundancy user workload data organizing. Moreover, boxplot, regular enough data annotation template, can automatedly manipulated R. lack template data structure makes using frequency unbalanced among research. Hence, frequency using low-frequency templates can increased. Advanced plot: Compared basic visualization methods, visualization methods contain comprehensive data types often require third-party tools input data processing. extensible type visualization methods iTOL.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_parameters_count.html","id":null,"dir":"Reference","previous_headings":"","what":"template parameters count — template_parameters_count","title":"template parameters count — template_parameters_count","text":"Template types parameters count matrix. row names template types. column names parameters short ids. parameters including themes parameters data column names. details introduced full-page Excel file GitHub.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_parameters_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"template parameters count — template_parameters_count","text":"","code":"template_parameters_count"},{"path":[]},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/template_parameters_count.html","id":"template-parameters-count","dir":"Reference","previous_headings":"","what":"template_parameters_count","title":"template parameters count — template_parameters_count","text":"data frame template types parameters 0/1 count matrix: V1 head. file type head notice V2 separator. select separator used delimit data (TAB,SPACE COMMA).separator must used throughout file. V3 dataset name. label used legend table","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/train_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Train inbuilt theme — train_theme","title":"Train inbuilt theme — train_theme","text":"inbuilt theme template output file unit. Using function can train inbuilt theme object custom files.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/train_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train inbuilt theme — train_theme","text":"","code":"train_theme(dir = getwd())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/train_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train inbuilt theme — train_theme","text":"dir path tree file template files","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/train_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train inbuilt theme — train_theme","text":"replace global variable inbuilt_themes","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/unite_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste rows — unite_rows","title":"Paste rows — unite_rows","text":"Paste rows group key column","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/unite_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste rows — unite_rows","text":"","code":"unite_rows(df)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/unite_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste rows — unite_rows","text":"df input data frame","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/unite_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste rows — unite_rows","text":"data frame pasted row id","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/use.theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract theme from inbuilt_themes — use.theme","title":"Extract theme from inbuilt_themes — use.theme","text":"Extract theme 23 template types inbuilt_themes data package.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/use.theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract theme from inbuilt_themes — use.theme","text":"","code":"use.theme(type, style = \"default\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/use.theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract theme from inbuilt_themes — use.theme","text":"type character specifying template type used extracting. Following choices possible: \"COLLAPSE\",\"PRUNE\",\"SPACING\",\"TREE_COLORS\", \"DATASET_STYLE\",\"LABELS\",\"DATASET_TEXT\",\"DATASET_COLORSTRIP\", \"DATASET_BINARY\",\"DATASET_GRADIENT\",\"DATASET_HEATMAP\",\"DATASET_SYMBOL\", \"DATASET_EXTERNALSHAPE\",\"DATASET_DOMAINS\",\"DATASET_SIMPLEBAR\", \"DATASET_MULTIBAR\",\"DATASET_BOXPLOT\",\"DATASET_LINECHART\",\"DATASET_PIECHART\", \"DATASET_ALIGNMENT\",\"DATASET_CONNECTION\",\"DATASET_IMAGE\",\"POPUP_INFO. style character specifying specific version template type used extracting. default value \"default\" style types.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/use.theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract theme from inbuilt_themes — use.theme","text":"itol.theme object containing type group holds information template type data . critical piece information. many functions itol.toolkit package, template type information used determine different data processing input/output methods. sep group holds data separator information . one important parameters data reading output. separate category frequently used input parameter subsequent parameters read. profile group contains basic information dataset, dataset name color label distinguish dataset. dataset name extremely important. parameter used almost throughout data processing itol.toolkit package. content parameter key value, data theme information dataset associated. turn, high throughput learning writing large-scale data can achieved. parameter included template types particularly simple structure, choose file name user-defined method key value. field group contains information sample within dataset, type parameter exists multi-sample data. information even includes clustering tree samples. information usually stored part column names metadata part abundance information itol.hub object. common_themes themes used high frequency different templates. parameters small number constitute common features iTOL visual style settings, legend, margin, etc. specific_themes themes used specific templates. number parameters large. However, used one template control style details visualization. unifying parameters calling according template type, users can perform secondary development data processing high degree parameter aggregation without worrying much differences different template types.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/use.theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract theme from inbuilt_themes — use.theme","text":"","code":"theme <- use.theme(\"COLLAPSE\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/vector_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector tree — vector_tree","title":"Vector tree — vector_tree","text":"build tree vector characters.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/vector_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector tree — vector_tree","text":"","code":"vector_tree(vector, branch_length = 1)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/vector_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector tree — vector_tree","text":"vector input vector branch_length branch length, default 1.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_hub.html","id":null,"dir":"Reference","previous_headings":"","what":"Write all data object into files — write_hub","title":"Write all data object into files — write_hub","text":"Write itol.hub object template files.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_hub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write all data object into files — write_hub","text":"","code":"write_hub(object, dir = getwd(), with_tree = FALSE)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_hub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write all data object into files — write_hub","text":"object itol.hub object holds complete data theme information. --one object collects information. Based object, possible export template files directly. can also converted operation unit object detailed processing individual datasets. object can also saved locally reproducible visualization share. object contains species sample clustering trees, sequence alignment, species abundance gene expression table, multi-level taxonomic information, metadata, list custom themes. element name theme list prefixed column name metadata used establish association theme data. special dataset types, storage location metadata, also conforms association themes. program automatically decides read data according different output template types. user needs explicitly define theme name output consistent data name prefix. dir output dir path. Define output files location using absolute relative path. template files output key information theme name hub object. with_tree output tree file newick format.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_hub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write all data object into files — write_hub","text":"return value, output template files","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_hub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write all data object into files — write_hub","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") hub <- create_hub(tree = tree) data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit_1 <- create_unit(data = df_group,                       key = \"Quickstart_1\",                       type = \"TREE_COLORS\",                       subtype = \"clade\",                       line_type = c(rep(\"normal\",4),\"dashed\"),                       size_factor = 5,                       tree = tree) #> Identifying data column to auto setup color parameter #> Using default color pattern: table2itol unit_2 <- create_unit(data = df_group,                       key = \"Quickstart_2\",                       type = \"DATASET_COLORSTRIP\",                       tree = tree) #> Using default color pattern: table2itol ## write hub hub <- hub + unit_1 + unit_2 write_hub(hub,tempdir())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Write raw data into files — write_raw","title":"Write raw data into files — write_raw","text":"Write raw data itol.hub object files","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write raw data into files — write_raw","text":"","code":"write_raw(object, dir, title)"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write raw data into files — write_raw","text":"object itol.hub object holds complete data theme information. --one object collects information. Based object, possible export template files directly. can also converted operation unit object detailed processing individual datasets. object can also saved locally reproducible visualization share. object contains species sample clustering trees, sequence alignment, species abundance gene expression table, multi-level taxonomic information, metadata, list custom themes. element name theme list prefixed column name metadata used establish association theme data. special dataset types, storage location metadata, also conforms association themes. program automatically decides read data according different output template types. user needs explicitly define theme name output consistent data name prefix. dir output dir path. Define output files location using absolute relative path. raw data write files. following raw data outputted: main tree, sample tree, alignment sequences, abundance count table, taxonomy table, metadata nodes tips. title files name title string. character specified prefix raw data files.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write raw data into files — write_raw","text":"return value, output raw data files","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write raw data into files — write_raw","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") hub <- create_hub(tree = tree) df_values <- data.table::fread(system.file(\"extdata\",                                            \"templates_frequence.txt\",                                            package = \"itol.toolkit\")) unit <- create_unit(data = df_values,                     key = \"Quickstart\",                     type = \"DATASET_HEATMAP\",                     tree = tree) #> Using the first column as id: templates hub <- hub + unit write_raw(hub,tempdir(),\"Quickstart\")"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Write unit object into file — write_unit","title":"Write unit object into file — write_unit","text":"Write itol.unit object template file. function using type information unit object decide different output methods template formats.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write unit object into file — write_unit","text":"","code":"write_unit(unit, file = getwd())"},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write unit object into file — write_unit","text":"unit unit object. unit object holds data theme single dataset. smallest data operation unit. level, individual data can fine-tuned. also possible extract style unit use units. also possible use many units learn complete itol.hub object. Almost specific data operations behind itol.toolkit package performed unit level. itol.hub objects comprehensive information, ensure correspondence phylogenetic branches nodes remains consistent different data types saved, many complex data aggregations saved, facilitate data processing. Therefore, actual data processing process, unit objects generated itol.hub object processed. file output file path. Define output file location file name using absolute relative path.","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_unit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write unit object into file — write_unit","text":"return value, output template file","code":""},{"path":"https://tongzhou2017.github.io/itol.toolkit/reference/write_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write unit object into file — write_unit","text":"","code":"tree <- system.file(\"extdata\",                     \"tree_of_itol_templates.tree\",                     package = \"itol.toolkit\") data(\"template_groups\") df_group <- data.frame(id = unique(template_groups$group),                        data = unique(template_groups$group)) ## create unit unit <- create_unit(data = df_group,                     key = \"Quickstart\",                     type = \"DATASET_COLORSTRIP\",                     tree = tree) #> Using default color pattern: table2itol ## write unit write_unit(unit,tempfile())"}]
